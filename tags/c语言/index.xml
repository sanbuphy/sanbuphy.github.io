<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C语言 on 散步的小屋</title>
    <link>https://sanbuphy.github.io/tags/c%E8%AF%AD%E8%A8%80/</link>
    <description>Recent content in C语言 on 散步的小屋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 06 Feb 2023 12:08:27 +0800</lastBuildDate><atom:link href="https://sanbuphy.github.io/tags/c%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>我的计算机学习网站集合</title>
      <link>https://sanbuphy.github.io/p/%E6%88%91%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%9B%86%E5%90%88/</link>
      <pubDate>Mon, 06 Feb 2023 12:08:27 +0800</pubDate>
      
      <guid>https://sanbuphy.github.io/p/%E6%88%91%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%9B%86%E5%90%88/</guid>
      <description>写在前面 收录了个人喜好觉得品味好的网站（也有一些小工具）， 如果有其他好的建议也欢迎提出，非常感谢。 不定期更新 带目录边栏（电脑上可看）：htt</description>
    </item>
    
    <item>
      <title>优雅的调试—在vscode上完美调试xv6（完结）</title>
      <link>https://sanbuphy.github.io/p/%E4%BC%98%E9%9B%85%E7%9A%84%E8%B0%83%E8%AF%95%E5%9C%A8vscode%E4%B8%8A%E5%AE%8C%E7%BE%8E%E8%B0%83%E8%AF%95xv6%E5%AE%8C%E7%BB%93/</link>
      <pubDate>Thu, 29 Sep 2022 08:50:40 +0800</pubDate>
      
      <guid>https://sanbuphy.github.io/p/%E4%BC%98%E9%9B%85%E7%9A%84%E8%B0%83%E8%AF%95%E5%9C%A8vscode%E4%B8%8A%E5%AE%8C%E7%BE%8E%E8%B0%83%E8%AF%95xv6%E5%AE%8C%E7%BB%93/</guid>
      <description>前言： 整个探索过程源于两句话： 1、计算机世界没有魔法，机器永远是对的，让自己舒服才会有动力（比如调试）——jyy 2、从今天开始, 不要偷懒了；</description>
    </item>
    
    <item>
      <title>NJU计算机课程基础实验 PA4笔记（大结局）</title>
      <link>https://sanbuphy.github.io/p/nju%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C-pa4%E7%AC%94%E8%AE%B0%E5%A4%A7%E7%BB%93%E5%B1%80/</link>
      <pubDate>Fri, 16 Sep 2022 08:50:40 +0800</pubDate>
      
      <guid>https://sanbuphy.github.io/p/nju%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C-pa4%E7%AC%94%E8%AE%B0%E5%A4%A7%E7%BB%93%E5%B1%80/</guid>
      <description>从这我越来越感受到系统复杂度上升带来的挑战，也明白了抽象的根本目的。 抽象是为了降低复杂度，为了系统能够更好的做大以及稳健和排错。 而且抽象能让</description>
    </item>
    
    <item>
      <title>NJU计算机课程基础实验 PA3笔记（二）</title>
      <link>https://sanbuphy.github.io/p/nju%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C-pa3%E7%AC%94%E8%AE%B0%E4%BA%8C/</link>
      <pubDate>Sun, 28 Aug 2022 08:50:40 +0800</pubDate>
      
      <guid>https://sanbuphy.github.io/p/nju%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C-pa3%E7%AC%94%E8%AE%B0%E4%BA%8C/</guid>
      <description>4、简易文件系统 对用户程序来说, 它怎么知道文件位于ramdisk的哪一个位置呢? 更何况文件会动态地增删, 用户程序并不知情. 这说明, 把ramd</description>
    </item>
    
    <item>
      <title>NJU计算机课程基础实验 PA3笔记（一）</title>
      <link>https://sanbuphy.github.io/p/nju%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C-pa3%E7%AC%94%E8%AE%B0%E4%B8%80/</link>
      <pubDate>Fri, 26 Aug 2022 08:50:40 +0800</pubDate>
      
      <guid>https://sanbuphy.github.io/p/nju%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C-pa3%E7%AC%94%E8%AE%B0%E4%B8%80/</guid>
      <description>写在前面：感谢pony、杨婆婆等群友的讨论和帮助，让我对PA有了更深入的理解。 关于问题部分：请遵守学术诚信，有关提问都要自己思考（笔记也不会</description>
    </item>
    
    <item>
      <title>NJU计算机课程基础实验 PA2笔记（二）</title>
      <link>https://sanbuphy.github.io/p/nju%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C-pa2%E7%AC%94%E8%AE%B0%E4%BA%8C/</link>
      <pubDate>Sat, 13 Aug 2022 08:50:40 +0800</pubDate>
      
      <guid>https://sanbuphy.github.io/p/nju%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C-pa2%E7%AC%94%E8%AE%B0%E4%BA%8C/</guid>
      <description>基础设施(2)（还未全完成 trace系列暂时待填坑。。。。 NEMU是一个用来执行其它程序的程序. 在可计算理论中, 这种程序有一个专门的名词, 叫</description>
    </item>
    
    <item>
      <title>NJU计算机课程基础实验 PA2笔记（一）</title>
      <link>https://sanbuphy.github.io/p/nju%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C-pa2%E7%AC%94%E8%AE%B0%E4%B8%80/</link>
      <pubDate>Fri, 12 Aug 2022 21:50:40 +0800</pubDate>
      
      <guid>https://sanbuphy.github.io/p/nju%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C-pa2%E7%AC%94%E8%AE%B0%E4%B8%80/</guid>
      <description>PA2.1 冯诺依曼计算机 写在前面： 首先要感谢jyy群一直帮助我的pony小哥、17号小哥、YSYX论坛（还有很多帮助我的人，没写出来但我都很感谢！）</description>
    </item>
    
    <item>
      <title>C语言标准IO的缓冲区介绍</title>
      <link>https://sanbuphy.github.io/p/c%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86io%E7%9A%84%E7%BC%93%E5%86%B2%E5%8C%BA%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sun, 31 Jul 2022 11:33:06 +0800</pubDate>
      
      <guid>https://sanbuphy.github.io/p/c%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86io%E7%9A%84%E7%BC%93%E5%86%B2%E5%8C%BA%E4%BB%8B%E7%BB%8D/</guid>
      <description>详细的缓冲区介绍请看这篇文章，非常详细 https://www.cnblogs.com/lanhaicode/p/10575049.html 全缓冲：当缓冲区被填满以后才进行真正的输入输出操作 行缓冲：当在输入或者输出的过程中遇到换行符时，才执</description>
    </item>
    
    <item>
      <title>C位段/位域(bit field)的排序原理</title>
      <link>https://sanbuphy.github.io/p/c%E4%BD%8D%E6%AE%B5/%E4%BD%8D%E5%9F%9Fbit-field%E7%9A%84%E6%8E%92%E5%BA%8F%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sun, 31 Jul 2022 09:18:16 +0800</pubDate>
      
      <guid>https://sanbuphy.github.io/p/c%E4%BD%8D%E6%AE%B5/%E4%BD%8D%E5%9F%9Fbit-field%E7%9A%84%E6%8E%92%E5%BA%8F%E5%8E%9F%E7%90%86/</guid>
      <description>在做PA的过程中，发现这样的一段代码（模拟cpu的过程）： 那么问题就来了——为什么这里op位段会自动匹配前面的部分？（为什么不匹配后面） 和大</description>
    </item>
    
    <item>
      <title>防止stack overflow——内存地址杀毒</title>
      <link>https://sanbuphy.github.io/p/%E9%98%B2%E6%AD%A2stack-overflow%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80%E6%9D%80%E6%AF%92/</link>
      <pubDate>Sat, 30 Jul 2022 16:08:27 +0800</pubDate>
      
      <guid>https://sanbuphy.github.io/p/%E9%98%B2%E6%AD%A2stack-overflow%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80%E6%9D%80%E6%AF%92/</guid>
      <description>提问： 我们有什么检测手段（编译器或者操作系统自带检测）能防止stack overflow嘛？或者说防止出栈超界 程序中的内存地址规定好r但不给w</description>
    </item>
    
    <item>
      <title>NJU计算机课程基础实验 PA1笔记</title>
      <link>https://sanbuphy.github.io/p/nju%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C-pa1%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 11 Jun 2022 22:50:40 +0800</pubDate>
      
      <guid>https://sanbuphy.github.io/p/nju%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C-pa1%E7%AC%94%E8%AE%B0/</guid>
      <description>PA0比较简单，就不再重复说明。 PA1的任务 从图上可以知道，我们的关键是要从Mon读取Mem和Reg的信息 PA1.RTFSC apt-get install ccache which gcc 可以把gcc编译结果缓</description>
    </item>
    
    <item>
      <title>c语言编译过程简介</title>
      <link>https://sanbuphy.github.io/p/c%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 18 May 2022 13:24:37 +0800</pubDate>
      
      <guid>https://sanbuphy.github.io/p/c%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E7%AE%80%E4%BB%8B/</guid>
      <description>如果想要了解更仔细地过程，建议看csapp或者《程序员的自我修养》 最直接的编译过程 初始.c文件通过预处理器、编译器、汇编器、链接器得到最后的</description>
    </item>
    
  </channel>
</rss>
