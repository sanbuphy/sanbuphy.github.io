<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C语言 on 散步的小屋</title>
    <link>https://sanbuphy.github.io/tags/c%E8%AF%AD%E8%A8%80/</link>
    <description>Recent content in C语言 on 散步的小屋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 30 Jul 2022 16:08:27 +0800</lastBuildDate><atom:link href="https://sanbuphy.github.io/tags/c%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>防止stack overflow——内存地址杀毒</title>
      <link>https://sanbuphy.github.io/p/%E9%98%B2%E6%AD%A2stack-overflow%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80%E6%9D%80%E6%AF%92/</link>
      <pubDate>Sat, 30 Jul 2022 16:08:27 +0800</pubDate>
      
      <guid>https://sanbuphy.github.io/p/%E9%98%B2%E6%AD%A2stack-overflow%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80%E6%9D%80%E6%AF%92/</guid>
      <description>提问： 我们有什么检测手段（编译器或者操作系统自带检测）能防止stack overflow嘛？或者说防止出栈超界 程序中的内存地址规定好r但不给w</description>
    </item>
    
    <item>
      <title>NJU计算机课程基础实验 PA2笔记</title>
      <link>https://sanbuphy.github.io/p/nju%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C-pa2%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 30 Jul 2022 15:05:41 +0800</pubDate>
      
      <guid>https://sanbuphy.github.io/p/nju%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C-pa2%E7%AC%94%E8%AE%B0/</guid>
      <description>PA2 冯诺依曼计算机 写在前面： 首先要感谢jyy群一直帮助我的pony小哥、17号小哥（还有很多帮助我的人，没写出来但我都很感谢！） 没有你们我是不</description>
    </item>
    
    <item>
      <title>NJU计算机课程基础实验 PA1笔记</title>
      <link>https://sanbuphy.github.io/p/nju%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C-pa1%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 11 Jun 2022 22:50:40 +0800</pubDate>
      
      <guid>https://sanbuphy.github.io/p/nju%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C-pa1%E7%AC%94%E8%AE%B0/</guid>
      <description>PA0比较简单，就不再重复说明。 PA1的任务 从图上可以知道，我们的关键是要从Mon读取Mem和Reg的信息 PA1.RTFSC apt-get install ccache which gcc 可以把gcc编译结果缓</description>
    </item>
    
    <item>
      <title>c语言编译过程简介</title>
      <link>https://sanbuphy.github.io/p/c%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 18 May 2022 13:24:37 +0800</pubDate>
      
      <guid>https://sanbuphy.github.io/p/c%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E7%AE%80%E4%BB%8B/</guid>
      <description>最直接的编译过程 初始.c文件通过预处理器、编译器、汇编器、链接器得到最后的可执行程序（比如linux系统下的a.out） hello.i：he</description>
    </item>
    
  </channel>
</rss>
