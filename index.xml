<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>散步的小屋</title>
        <link>https://sanbuphy.github.io/</link>
        <description>Recent content on 散步的小屋</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Thu, 12 May 2022 22:25:38 +0800</lastBuildDate><atom:link href="https://sanbuphy.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Disco Diffusion关键字大赏</title>
        <link>https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/</link>
        <pubDate>Thu, 12 May 2022 22:25:38 +0800</pubDate>
        
        <guid>https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/</guid>
        <description>&lt;img src="https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/Cherry_blossomsvillage_river_sunshine_dream_Greg_Rutkowski_James_Gurney_Artstation_200.png" alt="Featured image of post Disco Diffusion关键字大赏" /&gt;&lt;p&gt;长话短说，直接贴图！     &lt;br&gt;
[部分收集自b站]    &lt;br&gt;
以下是图片及其对应生成输入（因为图片命名更改了格式，含有&#39;_&amp;lsquo;字样，请自行处理一下或者写一个 str.replace()方法替换成空格,且吧末尾的200去除）&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 166; 
			flex-basis: 400px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/HUNLI.png&#34; data-size=&#34;724x434&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/HUNLI.png&#34;
			width=&#34;724&#34;
			height=&#34;434&#34;
			srcset=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/HUNLI_hu57be4c8cf4f569af55fe8eb4b8314839_438511_480x0_resize_box_3.png 480w, https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/HUNLI_hu57be4c8cf4f569af55fe8eb4b8314839_438511_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;A_beautiful_painting_of_a_romantic_and_elegant_wedding_at_sunset_A_bride_white_wedding_dress_A_church_by_the_sea_rose_beach_light_effect_Dream_Caspar_David_Friedrich_artstation_200&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;A_beautiful_painting_of_a_romantic_and_elegant_wedding_at_sunset_A_bride_white_wedding_dress_A_church_by_the_sea_rose_beach_light_effect_Dream_Caspar_David_Friedrich_artstation_200&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 161; 
			flex-basis: 387px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/SHITOU.png&#34; data-size=&#34;729x452&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/SHITOU.png&#34;
			width=&#34;729&#34;
			height=&#34;452&#34;
			srcset=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/SHITOU_hu8083aaaf20cdd3d99879a2639271d59e_414287_480x0_resize_box_3.png 480w, https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/SHITOU_hu8083aaaf20cdd3d99879a2639271d59e_414287_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Light_effect_Dream_Galaxy_StarsGreg_Rutkowski_Unreal_engine_Artstation_Towering_waves_200&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Light_effect_Dream_Galaxy_StarsGreg_Rutkowski_Unreal_engine_Artstation_Towering_waves_200&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 165; 
			flex-basis: 397px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/Splendid_colorful_fireworks_in_the_sky_desert_Dream_Karlsimon_Greg_Rutkowski_Unreal_Engine_James_Gurney_Artstation_200.png&#34; data-size=&#34;726x438&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/Splendid_colorful_fireworks_in_the_sky_desert_Dream_Karlsimon_Greg_Rutkowski_Unreal_Engine_James_Gurney_Artstation_200.png&#34;
			width=&#34;726&#34;
			height=&#34;438&#34;
			srcset=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/_hu8f3409a8ecaf71a4b684177f986ed425_456326_fd6d1cf50cc890b5cc4445563c55a57e.png 480w, https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/_hu8f3409a8ecaf71a4b684177f986ed425_456326_333729d1ad6e610c4446868772725778.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Splendid_colorful_fireworks_in_the_sky_desert_Dream_Karlsimon_Greg_Rutkowski_Unreal_Engine_James_Gurney_Artstation_200&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Splendid_colorful_fireworks_in_the_sky_desert_Dream_Karlsimon_Greg_Rutkowski_Unreal_Engine_James_Gurney_Artstation_200&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 166; 
			flex-basis: 398px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/The_mountains_follow_the_plains_and_the_river_flows_into_the_great_wildernessTrending_on_artstation_200.png&#34; data-size=&#34;734x442&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/The_mountains_follow_the_plains_and_the_river_flows_into_the_great_wildernessTrending_on_artstation_200.png&#34;
			width=&#34;734&#34;
			height=&#34;442&#34;
			srcset=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/_hud9303e8d604812231fc0e33d72e201be_498004_e36550f3e9b5d368323ded01a28f15a9.png 480w, https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/_hud9303e8d604812231fc0e33d72e201be_498004_77368a81fe0461a0e9d9ec27b46984b7.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;The_mountains_follow_the_plains_and_the_river_flows_into_the_great_wildernessTrending_on_artstation_200&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;The_mountains_follow_the_plains_and_the_river_flows_into_the_great_wildernessTrending_on_artstation_200&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 169; 
			flex-basis: 406px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/A_beautiful_painting_of_a_building_full_of_sakura_bridge_clouds_sunset_fairy_tale_Distant_town_light_effect_dream_Josan_Gonzalez_artstation_200.png&#34; data-size=&#34;729x430&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/A_beautiful_painting_of_a_building_full_of_sakura_bridge_clouds_sunset_fairy_tale_Distant_town_light_effect_dream_Josan_Gonzalez_artstation_200.png&#34;
			width=&#34;729&#34;
			height=&#34;430&#34;
			srcset=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/_hube4f578665231f9dfbcf5eb27c3b0db1_532799_79daeda1f591dc64bb0438f4494ca77b.png 480w, https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/_hube4f578665231f9dfbcf5eb27c3b0db1_532799_f51a159a4c01dcb6a70bfa90ee2a5f60.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;A_beautiful_painting_of_a_building_full_of_sakura_bridge_clouds_sunset_fairy_tale_Distant_town_light_effect_dream_Josan_Gonzalez_artstation_200&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;A_beautiful_painting_of_a_building_full_of_sakura_bridge_clouds_sunset_fairy_tale_Distant_town_light_effect_dream_Josan_Gonzalez_artstation_200&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 167; 
			flex-basis: 401px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/a_beautiful_painting_of_mysterious_hard_sci-fi_city_at_sunset_clouds_neon_light_Cyberpunk_Magnificent_Greg_Rutkowski_artstation_200.png&#34; data-size=&#34;732x438&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/a_beautiful_painting_of_mysterious_hard_sci-fi_city_at_sunset_clouds_neon_light_Cyberpunk_Magnificent_Greg_Rutkowski_artstation_200.png&#34;
			width=&#34;732&#34;
			height=&#34;438&#34;
			srcset=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/_huc7c0fda3e1a58e30459cc92c7e704eb1_442887_bc89f8424023fbd37b45d63eaf2955df.png 480w, https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/_huc7c0fda3e1a58e30459cc92c7e704eb1_442887_cf3e7e4ef15f0a8ffe1413d82d015428.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;a_beautiful_painting_of_mysterious_hard_sci-fi_city_at_sunset_clouds_neon_light_Cyberpunk_Magnificent_Greg_Rutkowski_artstation_200&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;a_beautiful_painting_of_mysterious_hard_sci-fi_city_at_sunset_clouds_neon_light_Cyberpunk_Magnificent_Greg_Rutkowski_artstation_200&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 164; 
			flex-basis: 395px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/A_Moonlit_Night_On_The_Spring_River_Greg_Rutkowski_James_Gurney_Artstation_200.png&#34; data-size=&#34;727x441&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/A_Moonlit_Night_On_The_Spring_River_Greg_Rutkowski_James_Gurney_Artstation_200.png&#34;
			width=&#34;727&#34;
			height=&#34;441&#34;
			srcset=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/_hudb41ae815dc886e639faad6927e24700_488825_96e97d1f40bf5e33a37430dd2f262c6e.png 480w, https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/_hudb41ae815dc886e639faad6927e24700_488825_ef82fa1a8d5ca425f78f15e9d2e16ec9.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;A_Moonlit_Night_On_The_Spring_River_Greg_Rutkowski_James_Gurney_Artstation_200&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;A_Moonlit_Night_On_The_Spring_River_Greg_Rutkowski_James_Gurney_Artstation_200&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;br&gt;
ps:你可能难以想象，他的英文出自《春江花月夜》 &lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 165; 
			flex-basis: 396px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/The_peach_blossom_lover_plants_peach_trees_in_days_fine_Greg_Rutkowski_James_Gurney_Artstation_200.png&#34; data-size=&#34;729x441&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/The_peach_blossom_lover_plants_peach_trees_in_days_fine_Greg_Rutkowski_James_Gurney_Artstation_200.png&#34;
			width=&#34;729&#34;
			height=&#34;441&#34;
			srcset=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/_hud85a1b68218c2832f0eda41de8337f3f_519532_6284b51dee6198d3693aa2cd76aa0776.png 480w, https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/_hud85a1b68218c2832f0eda41de8337f3f_519532_48530b58692eec2b68a99d82a5a3e664.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;The_peach_blossom_lover_plants_peach_trees_in_days_fine_Greg_Rutkowski_James_Gurney_Artstation_200&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;The_peach_blossom_lover_plants_peach_trees_in_days_fine_Greg_Rutkowski_James_Gurney_Artstation_200&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;br&gt;
ps:你可能难以想象，他的英文出自唐寅的《桃花庵歌》“桃花仙人种桃树”&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 165; 
			flex-basis: 397px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/A_Moonlit_Night_On_The_Spring_Riverromantic_In_the_morning_Greg_Rutkowski_James_Gurney_Artstation_160.png&#34; data-size=&#34;726x438&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/A_Moonlit_Night_On_The_Spring_Riverromantic_In_the_morning_Greg_Rutkowski_James_Gurney_Artstation_160.png&#34;
			width=&#34;726&#34;
			height=&#34;438&#34;
			srcset=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/_hu185441241326638446cae9d50a00cfdd_507576_4027901b7ac8e79e68fb5984bec22001.png 480w, https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/_hu185441241326638446cae9d50a00cfdd_507576_e3115ce2da956ccff0cd45afc251fcdf.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;A_Moonlit_Night_On_The_Spring_Riverromantic_In_the_morning_Greg_Rutkowski_James_Gurney_Artstation_160&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;A_Moonlit_Night_On_The_Spring_Riverromantic_In_the_morning_Greg_Rutkowski_James_Gurney_Artstation_160&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;br&gt;
ps:你可能难以想象，他的英文出自《春江花月夜》 &lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 167; 
			flex-basis: 401px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/Change_is_the_WayGreat_seas_have_turned_into_fieldsTrending_on_artstation_200.png&#34; data-size=&#34;739x442&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/Change_is_the_WayGreat_seas_have_turned_into_fieldsTrending_on_artstation_200.png&#34;
			width=&#34;739&#34;
			height=&#34;442&#34;
			srcset=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/_hu3cf4696608d098394a7d787ab0891042_528197_21db02e0b894159286e5d5198246a2f6.png 480w, https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/_hu3cf4696608d098394a7d787ab0891042_528197_2508afd44169b75c18cd75d47627e29f.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Change_is_the_WayGreat_seas_have_turned_into_fieldsTrending_on_artstation_200&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Change_is_the_WayGreat_seas_have_turned_into_fieldsTrending_on_artstation_200&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;br&gt;
ps:你可能难以想象，他的英文出自【人间正道是沧桑】&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 166; 
			flex-basis: 399px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/Cherry_blossoms_grand_palaces_above_clouds_rivers_sunshine_dream_Greg_Rutkowski_James_Gurney_Artstation_200.png&#34; data-size=&#34;734x441&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/Cherry_blossoms_grand_palaces_above_clouds_rivers_sunshine_dream_Greg_Rutkowski_James_Gurney_Artstation_200.png&#34;
			width=&#34;734&#34;
			height=&#34;441&#34;
			srcset=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/_hu829ff27670732ab1c894e3f69a29609b_502882_2f72bccca381128900a5ac8b3e32aa70.png 480w, https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/_hu829ff27670732ab1c894e3f69a29609b_502882_28e8dcb83e7bd74c2756e6a23d115d43.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Cherry_blossoms_grand_palaces_above_clouds_rivers_sunshine_dream_Greg_Rutkowski_James_Gurney_Artstation_200&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Cherry_blossoms_grand_palaces_above_clouds_rivers_sunshine_dream_Greg_Rutkowski_James_Gurney_Artstation_200&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 168; 
			flex-basis: 404px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/Cherry_blossomsvillage_river_sunshine_dream_Greg_Rutkowski_James_Gurney_Artstation_200.png&#34; data-size=&#34;739x438&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/Cherry_blossomsvillage_river_sunshine_dream_Greg_Rutkowski_James_Gurney_Artstation_200.png&#34;
			width=&#34;739&#34;
			height=&#34;438&#34;
			srcset=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/_hud0ddbd73ac71be0ebba682dec347f5c6_597770_7cf12ac4bcd10fba37661d66e2a9c1bc.png 480w, https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/_hud0ddbd73ac71be0ebba682dec347f5c6_597770_a13e4396c0bc347ee8482947aeec19aa.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Cherry_blossoms_village_river_sunshine_dream_Greg_Rutkowski_James_Gurney_Artstation_200&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Cherry_blossoms_village_river_sunshine_dream_Greg_Rutkowski_James_Gurney_Artstation_200&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 166; 
			flex-basis: 400px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/In_the_morning_light_some_ancient_Chinese_buildings_on_the_mountains_sakura_mysterious_and_serene_landscape_clouds_river_Ivan_Aivazovsky_artstation_200.png&#34; data-size=&#34;1280x768&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/In_the_morning_light_some_ancient_Chinese_buildings_on_the_mountains_sakura_mysterious_and_serene_landscape_clouds_river_Ivan_Aivazovsky_artstation_200.png&#34;
			width=&#34;1280&#34;
			height=&#34;768&#34;
			srcset=&#34;https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/_hu0063c7a84883bab5857c98c452ef4eb3_978613_a014e6d9ca8b8e0751e701c3c965262b.png 480w, https://sanbuphy.github.io/p/disco-diffusion%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%A7%E8%B5%8F/_hu0063c7a84883bab5857c98c452ef4eb3_978613_a5572fac69c69505ef1d26304fd9cc75.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;In_the_morning_light_some_ancient_Chinese_buildings_on_the_mountains_sakura_mysterious_and_serene_landscape_clouds_river_Ivan_Aivazovsky_artstation_200&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;In_the_morning_light_some_ancient_Chinese_buildings_on_the_mountains_sakura_mysterious_and_serene_landscape_clouds_river_Ivan_Aivazovsky_artstation_200&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>python中多进程、多线程概念的进阶探讨</title>
        <link>https://sanbuphy.github.io/p/python%E4%B8%AD%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A6%82%E5%BF%B5%E7%9A%84%E8%BF%9B%E9%98%B6%E6%8E%A2%E8%AE%A8/</link>
        <pubDate>Sun, 24 Apr 2022 19:23:03 +0800</pubDate>
        
        <guid>https://sanbuphy.github.io/p/python%E4%B8%AD%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A6%82%E5%BF%B5%E7%9A%84%E8%BF%9B%E9%98%B6%E6%8E%A2%E8%AE%A8/</guid>
        <description>&lt;p&gt;// TODO: &lt;br&gt;
//加入协程相关内容     &lt;br&gt;
// 资源安全性&lt;br&gt;
//         进程、线程间通信方式  &lt;br&gt;
// 如何捕获子线程异常&lt;/p&gt;
&lt;h2 id=&#34;简单理解进程和线程&#34;&gt;简单理解进程和线程&lt;/h2&gt;
&lt;h3 id=&#34;什么是进程&#34;&gt;什么是进程&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;一个任务就是一个进程，是操作系统资源分配的基本单位。&lt;/strong&gt;&lt;br&gt;
例如打开浏览器，打开word，打开游戏、QQ等等，都是独立的任务，它们各自为一个或者多个进程。&lt;br&gt;
这里要注意的是，同一种任务打开多个，分别属于不同进程，例如chrome打开多个标签，实际上它创建了多个进程。
“运行”的程序才可以称为进程。未运行的程序仅仅是一些指令和数据的集合，并非进程。&lt;/p&gt;
&lt;h3 id=&#34;什么是线程&#34;&gt;什么是线程&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;线程可以看作一个任务的各项子任务，是操作系统直接的执行单元。&lt;/strong&gt;&lt;br&gt;
例如播放器，既要解码视频、也要解码音频，所以在进程下存在多线程。在一个进程下一定存在一个线程，可以称它为主线程。&lt;/p&gt;
&lt;h3 id=&#34;小结&#34;&gt;小结&lt;/h3&gt;
&lt;p&gt;操作系统创建进程时，会单独为每一个进程分配各自的资源，进程与进程之间相互隔离。进程在执行过程中拥有独立的内存单元，而多个线程共享内存。    &lt;br&gt;
可见，操作系统执行的粒度是线程，分配资源的粒度是进程，我们的多任务操作系统，在单核CPU上是在各个线程上不断切换而达到目的，而在多核CPU上则多个任务可以创建多个进程来完成，同时也可以创建多个线程来完成，线程是操作系统直接的执行单元。能同时执行多个线程任务。 &lt;br&gt;
值得注意的是，在python中，由于全局解释器锁的存在，线程并没有发挥并行计算的作用，而是提供了并发的能力。（只能在一个cpu核上运行）&lt;/p&gt;
&lt;h2 id=&#34;进程与线程的比较&#34;&gt;进程与线程的比较&lt;/h2&gt;
&lt;h3 id=&#34;进程的优缺点&#34;&gt;进程的优缺点&lt;/h3&gt;
&lt;p&gt;多进程的优点是稳定性好，一个子进程崩溃了，不会影响主进程以及其余进程。   &lt;br&gt;
但是缺点是&lt;strong&gt;创建进程的代价非常大&lt;/strong&gt; ，因为操作系统要给每个进程分配固定的资源，并且，操作系统对进程的总数会有一定的限制，若进程过多，&lt;strong&gt;操作系统调度都会存在问题，会造成假死状态。&lt;/strong&gt;。不过，进程与进程之间是完全隔离的，进程A崩溃了完全不会影响到进程B。&lt;/p&gt;
&lt;h3 id=&#34;线程的优缺点&#34;&gt;线程的优缺点&lt;/h3&gt;
&lt;p&gt;多线程优点是效率较高一些，但是致命的缺点是&lt;strong&gt;任何一个线程崩溃都可能造成整个进程的崩&lt;/strong&gt;溃，因为它们共享了进程的内存资源池，没有自己单独的内存地址空间，指针数据的错误可以导致任何同地址空间内其他线程的崩溃，包括进程。&lt;/p&gt;
&lt;h2 id=&#34;进一步理解进程和线程可选&#34;&gt;进一步理解进程和线程（可选）&lt;/h2&gt;
&lt;h3 id=&#34;进程&#34;&gt;进程&lt;/h3&gt;
&lt;h4 id=&#34;进程的组成&#34;&gt;进程的组成&lt;/h4&gt;
&lt;p&gt;当一个程序被载入内存并成为一个进程后，它会占用一部分存储空间，此空间会分为 4 个区域：
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 70; 
			flex-basis: 168px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/python%E4%B8%AD%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A6%82%E5%BF%B5%E7%9A%84%E8%BF%9B%E9%98%B6%E6%8E%A2%E8%AE%A8/pic1.png&#34; data-size=&#34;324x462&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/python%E4%B8%AD%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A6%82%E5%BF%B5%E7%9A%84%E8%BF%9B%E9%98%B6%E6%8E%A2%E8%AE%A8/pic1.png&#34;
			width=&#34;324&#34;
			height=&#34;462&#34;
			srcset=&#34;https://sanbuphy.github.io/p/python%E4%B8%AD%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A6%82%E5%BF%B5%E7%9A%84%E8%BF%9B%E9%98%B6%E6%8E%A2%E8%AE%A8/pic1_hu13122d3c1dbbef932b1399d2f830bd0e_32351_480x0_resize_box_3.png 480w, https://sanbuphy.github.io/p/python%E4%B8%AD%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A6%82%E5%BF%B5%E7%9A%84%E8%BF%9B%E9%98%B6%E6%8E%A2%E8%AE%A8/pic1_hu13122d3c1dbbef932b1399d2f830bd0e_32351_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;
这 4 个区域的作用分别是：
栈（Stack）：存储局部变量、函数参数等临时数据。
堆（Heap）：进程在执行期间可以动态申请这部分空间。
数据区（Data）：存储全局变量和静态变量。
文本区（Text）：存储进程要执行的机器指令代码。&lt;/p&gt;
&lt;h4 id=&#34;进程的生命周期&#34;&gt;进程的生命周期&lt;/h4&gt;
&lt;h2 id=&#34;python中的gil全局解释器锁&#34;&gt;python中的GIL全局解释器锁&lt;/h2&gt;
&lt;p&gt;TODO:&lt;/p&gt;
&lt;h2 id=&#34;检查个人电脑的最大进程线程数&#34;&gt;检查个人电脑的最大进程、线程数&lt;/h2&gt;
&lt;p&gt;不同电脑的配置状况决定了一个系统能够运行多少进程以及对应的线程数，简单粗暴的方法是用实例代码来检测到底能运行多少进程和线程：（一般情况下不要过于离谱即可）   &lt;br&gt;
不过需要注意的是，不同任务处理所需要占用的内存和cpu使用率是不同的，需要具体情况具体分析，但通常情况下的使用不会出现大问题（除非你考虑到数据共享安全性，想让一组线程执行完后再启动下一轮，那就要根据实际情况设计最大线程并加上线程锁；等到获取到的这些数据处理后才能继续处理下一轮数据；或者使用大小限定队列与线程池）		
&lt;strong&gt;多进程测试代码&lt;/strong&gt;  
首先，你可以用这个语句（linux与mac）进行直接查看:&lt;code&gt;ubuntu&amp;gt; ps aux | wc -l&lt;/code&gt;,如果查询失败或者想要看到更直观的结果可以使用以下代码：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/usr/bin/python
 
import os
import sys
import re
import threading
import signal
import time
 
g_exit = 0
num  = 0
 
def sig_process(sig, frame):
	global g_exit
	g_exit = 1
 
def sub_process(data):
	while not g_exit:
		time.sleep(1)
		print data
 
def process():
	num = int(sys.argv[1])
	all_process = []
 
	for i in range(num):
		try:
			pid = os.fork()
		except:
			pid = -1
 
		if pid &amp;lt; 0:
			print &#39;error in fork&#39;
			all_process.append(-1)
		elif 0 == pid:
			sub_process(i)
			os._exit(0)
		else:
			all_process.append(pid)
 
	while not g_exit:
		time.sleep(100)
 
	for i in range(num):
		if -1 == all_process[i]:
			continue
		os.waitpid(all_process[i], 0)
 
def main():
	if len(sys.argv) != 2:
		print &#39;wrong number parameter&#39;
		return 0
 
	signal.signal(signal.SIGINT, sig_process)
	process()
 
if __name__ == &#39;__main__&#39;:
	main()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;多线程测试代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/usr/bin/python
 
import os
import sys
import re
import threading
import signal
import time
 
g_exit = 0
num  = 0
 
def sig_process(sig, frame):
	global g_exit
	g_exit = 1
 
def sub_process(data):
	while not g_exit:
		time.sleep(1)
		print data
 
def process():
	num = int(sys.argv[1])
	all_thread = []
 
	for i in range(num):
		try:
			td = threading.Thread(target = sub_process, args=(i,))
			td.start()
		except:
			all_thread.append(-1)
			continue
 
		all_thread.append(td)
 
	while not g_exit:
		time.sleep(100)
 
	for i in range(num):
		if isinstance(all_thread[i], int):
			continue
		all_thread[i].join()
 
def main():
	if len(sys.argv) != 2:
		print &#39;wrong number parameter&#39;
		return 0
 
	signal.signal(signal.SIGINT, sig_process)
	process()
 
 
if __name__ == &#39;__main__&#39;:
	main()
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/soyabean555999/article/details/79108680&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Python多线程与多进程学习&amp;mdash;-概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/weixin_43540515/article/details/114793287&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;操作系统，进程，线程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/22397613?sort=created&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;线程崩溃是否会造成进程崩溃&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/feixiaoxing/article/details/78565542&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;python编程（你的电脑能够执行多少线程和进程）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/weixin_45621200/article/details/120905195&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;python主线程捕获子线程异常&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.biancheng.net/os/process.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;操作系统&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>详解机器/深度学习中常见评价指标</title>
        <link>https://sanbuphy.github.io/p/%E8%AF%A6%E8%A7%A3%E6%9C%BA%E5%99%A8/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%AD%E5%B8%B8%E8%A7%81%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/</link>
        <pubDate>Tue, 12 Apr 2022 20:53:41 +0800</pubDate>
        
        <guid>https://sanbuphy.github.io/p/%E8%AF%A6%E8%A7%A3%E6%9C%BA%E5%99%A8/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%AD%E5%B8%B8%E8%A7%81%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/</guid>
        <description>&lt;p&gt;待进一步完善&amp;hellip;龟速填坑中&lt;/p&gt;
&lt;h1 id=&#34;评价指标的基石&#34;&gt;评价指标的基石&lt;/h1&gt;
&lt;p&gt;所有复杂问题都是简单问题的重复， &lt;br&gt;
为了理解所有指标，首先需了解“四大天王”与“三大护法”&lt;/p&gt;
&lt;h2 id=&#34;四大天王tpfp-tnfn&#34;&gt;四大天王——TP|FP TN|FN&lt;/h2&gt;
&lt;p&gt;我们认为positive代表了阳性（或者说正样本），   &lt;br&gt;
而Negative代表了阴性（负样本)，那么在二分类中我们根据猜测的对错很容易排列出2x2种情况：   &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;True&lt;/th&gt;
&lt;th&gt;False&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Positive&lt;/td&gt;
&lt;td&gt;TP(猜对了阳)&lt;/td&gt;
&lt;td&gt;FP(猜错了阳)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Negative&lt;/td&gt;
&lt;td&gt;TN(猜对了阴)&lt;/td&gt;
&lt;td&gt;FN(猜错了阴)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;其中&lt;strong&gt;左半边&lt;/strong&gt;表示真值和我的猜测一致（猜对了），&lt;strong&gt;右半边&lt;/strong&gt;表示真值和我的猜测不一致（猜错了）；&lt;br&gt;
&lt;strong&gt;上半边&lt;/strong&gt;表示猜测阳性的全体 $P$，&lt;strong&gt;下半边&lt;/strong&gt;表示猜测阴性的全体$N$。&lt;br&gt;
&lt;strong&gt;TP+FN&lt;/strong&gt;表示真值阳性的全体，&lt;strong&gt;TN+FP&lt;/strong&gt;表示真值阴性的全体。&lt;/p&gt;
&lt;h2 id=&#34;三大护法preaccrecall&#34;&gt;三大护法——Pre、ACC、Recall&lt;/h2&gt;
&lt;p&gt;根据四大金刚，我们容易得出常见模型中的三个评价指标，
(为什么不能只看一个呢？因为容易被“浮云遮望眼”)&lt;/p&gt;
&lt;h3 id=&#34;preprecision-精确率又称查准率&#34;&gt;Pre(Precision 精确率又称查准率)&lt;/h3&gt;
&lt;p&gt;精确和准确在中文上看起来是一个意思，但实际上有微小的区别；   &lt;br&gt;
我们可以通过投标的例子来理解什么是精确，什么是准确。     &lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 108; 
			flex-basis: 259px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/%E8%AF%A6%E8%A7%A3%E6%9C%BA%E5%99%A8/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%AD%E5%B8%B8%E8%A7%81%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/pre.png&#34; data-size=&#34;443x410&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/%E8%AF%A6%E8%A7%A3%E6%9C%BA%E5%99%A8/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%AD%E5%B8%B8%E8%A7%81%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/pre.png&#34;
			width=&#34;443&#34;
			height=&#34;410&#34;
			srcset=&#34;https://sanbuphy.github.io/p/%E8%AF%A6%E8%A7%A3%E6%9C%BA%E5%99%A8/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%AD%E5%B8%B8%E8%A7%81%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/pre_hu293cc79c30269c7ee26490aff220e369_50239_480x0_resize_box_3.png 480w, https://sanbuphy.github.io/p/%E8%AF%A6%E8%A7%A3%E6%9C%BA%E5%99%A8/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%AD%E5%B8%B8%E8%A7%81%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/pre_hu293cc79c30269c7ee26490aff220e369_50239_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;精确率是度量信噪的一种方式，是对偏差程度的反应（标准差大就不精确）&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;精确率是度量信噪的一种方式，是对偏差程度的反应（标准差大就不精确）&lt;/figcaption&gt;
	
&lt;/figure&gt;
从上图可知，精确率高的数据其标准差较小，也就是“我投中了，投中的差别不大”;在二分类中或者说判断是否阳性中，我们关注的重点是在我对阳性的判断中，是否判断对了(存不存在错判阳性的偏差）；如果精确率高，就说明我预测阳性偏差小，阳性就是真的阳性，较少出差错。     &lt;br&gt;
总结来说，精确率高指的是“我对正例判断出差错（偏差）的情况怎么样？”，也就是： &lt;br&gt;
$$
Precision = \frac{TP}{P} = \frac{TP}{TP+FP}
$$ &lt;br&gt;
精确率越高，说明我对正例/阳性判断的偏差越小，也就是TP占总判断阳性中的比例越大。
这时候可能会有聪明的同学问了，那为什么我们不考虑对负例判断的偏差呢，比如构建一个TN/TN+FN的指标？ &lt;br&gt;
其实是有的，一般的，Pre还有更深入的名字叫“positive predictive value (PPV)”，显然也有对应的“Negative predictive value (NPV) ” 只是因为负样本通常较少，正样本较多；所以把PPV作为一个更常用的指标，归为精确率。&lt;/p&gt;
&lt;h3 id=&#34;accaccuracy-准确率&#34;&gt;ACC(Accuracy 准确率)&lt;/h3&gt;
&lt;p&gt;为什么说精准但“精确不一定准确呢”？&lt;br&gt;
你可以这么想，精密仪器显然是为了误差小，那精密仪器一定能得到准确结果吗？————答案是不一定，比如你没有调零!(做过大物实验的朋友都知道~)     &lt;br&gt;
没有调零就好像y=kx+b中多了一个b，也就是投标图像中的“整体偏移真值” （下图的上半部分）    &lt;br&gt;
虽然很精确，但很不准确！！   &lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 159; 
			flex-basis: 383px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/%E8%AF%A6%E8%A7%A3%E6%9C%BA%E5%99%A8/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%AD%E5%B8%B8%E8%A7%81%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/pre-acc.png&#34; data-size=&#34;651x407&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/%E8%AF%A6%E8%A7%A3%E6%9C%BA%E5%99%A8/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%AD%E5%B8%B8%E8%A7%81%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/pre-acc.png&#34;
			width=&#34;651&#34;
			height=&#34;407&#34;
			srcset=&#34;https://sanbuphy.github.io/p/%E8%AF%A6%E8%A7%A3%E6%9C%BA%E5%99%A8/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%AD%E5%B8%B8%E8%A7%81%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/pre-acc_hu8a5893a2dc9a5dc60e3917fd76bdb1c7_115874_480x0_resize_box_3.png 480w, https://sanbuphy.github.io/p/%E8%AF%A6%E8%A7%A3%E6%9C%BA%E5%99%A8/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%AD%E5%B8%B8%E8%A7%81%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/pre-acc_hu8a5893a2dc9a5dc60e3917fd76bdb1c7_115874_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;左半侧更不准确，右半侧更准确&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;左半侧更不准确，右半侧更准确&lt;/figcaption&gt;
	
&lt;/figure&gt;
准确率更容易理解，准确率考虑的是更“全局”的结果是否正确， &lt;br&gt;
也就是在我所有预测的结果中，我到底预测的“好不好”，
即：
$$
Accuracy = \frac{TP+TN}{所有预测} = \frac{TP+TN}{TP+FP+TN+FN}
$$&lt;/p&gt;
&lt;h3 id=&#34;recall召回率又称查全率&#34;&gt;Recall(召回率又称查全率)&lt;/h3&gt;
&lt;p&gt;顾名思义，查全的意思就是“我查的全不全”，我是否把所有的阳性覆盖到了（阳性全体为P），&lt;/p&gt;
&lt;p&gt;$$
Recall =  \frac{TP}{阳性全体}=  \frac{TP}{TP+FN}
$$
&lt;strong&gt;有时候查全率很高，但精确率很低。&lt;/strong&gt;     &lt;br&gt;
比如我有3个阳性，97个阴性。我预测100个全为阳性（此时P=100且TP=3，FP=97），0个阴性；此时查全率为：3/3=100% ！&lt;br&gt;
但此时精确率为：3%。。。。。这显然是没有意义的。   &lt;br&gt;
&lt;strong&gt;有时候精确率很高，但查全率很低。&lt;/strong&gt;     &lt;br&gt;
比如我还是有3个阳性，97个阴性。我刚好预测对某1个为阳性（此时P=1且TP=1，FP=0），99个阴性；此时精确率为：100% ！   &lt;br&gt;
但此时查全率为：33.333%。。。。。这显然也是意义不大的。  &lt;br&gt;
&lt;strong&gt;查全率与精确率存在互逆关系&lt;/strong&gt;&lt;br&gt;
我们能够隐约发现查全率和精确率的互逆关系，但究竟是为什么呢？ &lt;br&gt;
仔细观察可以发现，Recall和Pre只在分母有差别，其中Recall的分母是TP+FN【不变量】，而Pre的分母是TP+FP【可变量】。&lt;br&gt;
为了提高Recall，我们需要增大TP，而分母不变； &lt;br&gt;
但Pre中如果TP增加了FP也会跟着增加（我需要判断的东西变多了，精确率会下降，错误的概率会变大），分子的TP增加小于分母的TP+FP总体的增加。所以查全率和精确率是互逆的。&lt;/p&gt;
&lt;h2 id=&#34;f1rpcrocauc&#34;&gt;F1、RPC、Roc、AUC&lt;/h2&gt;
&lt;p&gt;在充分了解了四大金刚与三大护法后，我们进一步来研究他们的衍生变体：&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/xys430381_1/article/details/90770520&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;机器学习基础&amp;mdash;分类与检测的评价指标&amp;mdash;AP，mAP，PRC曲线&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/240435991&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;分类问题中的一些指标概念-Roc|AUC|Pre|Recall|ACC|AP|mAP|F1总结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.pianshen.com/article/4398957319/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;分类器的ROC曲线及相关指标（ROC、AUC、ACC）详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/s/DOwFP4Qk4A415N8t8ibhAw&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MCC — 机器学习中优于F1-score和accuracy的一个性能评价指标&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://towardsdatascience.com/should-i-look-at-precision-recall-or-specificity-sensitivity-3946158aace1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Data Science in Medicine — Precision &amp;amp; Recall or Specificity &amp;amp; Sensitivity?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>C/C&#43;&#43;在Windows下的环境配置流程和运行方法</title>
        <link>https://sanbuphy.github.io/p/c/c-%E5%9C%A8windows%E4%B8%8B%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E5%92%8C%E8%BF%90%E8%A1%8C%E6%96%B9%E6%B3%95/</link>
        <pubDate>Sun, 20 Mar 2022 16:28:01 +0800</pubDate>
        
        <guid>https://sanbuphy.github.io/p/c/c-%E5%9C%A8windows%E4%B8%8B%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E5%92%8C%E8%BF%90%E8%A1%8C%E6%96%B9%E6%B3%95/</guid>
        <description>&lt;p&gt;笔者因为要使用opencv c++版的需求，需要给家里的电脑配c/cpp的运行环境，    &lt;br&gt;
如果是Linux无脑Clion即可，windows上稍微有一些麻烦，附上全流程：&lt;/p&gt;
&lt;p&gt;首先请按照这个博主的安装教程走一遍流程&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/77645306&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;c++ c语言安装流程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果顺利的安装好环境，接下来就是运行环节，首先随便新建一个C或者cpp文件，可参考；     &lt;br&gt;
C语言的版本：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;windows.h&amp;gt;
int main()
{
 printf(&amp;quot;Hello World\n&amp;quot;);
 system(&amp;quot;pause&amp;quot;);
 return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;C++的版本：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt; 
using namespace std;  

int main()
{    
    cout &amp;lt;&amp;lt; &amp;quot;Hello Vscode&amp;quot; &amp;lt;&amp;lt; endl;  
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来就是最重要的部分，我们有两种办法编译好文件运行，   &lt;br&gt;
第一种办法（直接编译）：     &lt;br&gt;
在终端中进入对应文件夹，输入gcc xxx.c   或者g++ xxxx.cpp     &lt;br&gt;
即可将文件编译成exe，然后直接终端中输入exe文件名字即可查看效果！         &lt;br&gt;
如果你想运行后直接看跳出的结果，可以按照开头知乎链接的答主方法操作。&lt;/p&gt;
&lt;p&gt;第二种方法（间接编译）：     &lt;br&gt;
我们要做两件事：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先在上面菜单栏找到终端，选择配置生成任务，选择对应的文件（gcc或者g++  有可能只显示c++ 但点进去后会出现gcc)&lt;/li&gt;
&lt;li&gt;左侧找到运行与调试在上面框框中点开，然后选择工作区对应的文件夹添加配置（会生成.vscode文件夹，内部就是配置文件！），或者直接运行中找到添加配置，然后同样找到对应gcc g++即可（gcc或者g++  有可能只显示c++ 但点进去后会出现gcc)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果第二种方法配置出现问题了（launch或者task），你可以把.vscode文件夹删除，重新配置即可。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>考研，找工作的那些事</title>
        <link>https://sanbuphy.github.io/p/%E8%80%83%E7%A0%94%E6%89%BE%E5%B7%A5%E4%BD%9C%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</link>
        <pubDate>Mon, 21 Feb 2022 21:18:24 +0800</pubDate>
        
        <guid>https://sanbuphy.github.io/p/%E8%80%83%E7%A0%94%E6%89%BE%E5%B7%A5%E4%BD%9C%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid>
        <description>&lt;h2 id=&#34;找工作的怪象与形成的本源最重要的&#34;&gt;找工作的怪象与形成的本源【最重要的】&lt;/h2&gt;
&lt;h3 id=&#34;产业分布我该去哪&#34;&gt;产业分布——我该去哪？&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;一线：互联网企业、高新技术企业   ————  房价很高 容不下肉身  
二三线：事业单位、国企、各种你懂编制（研究所、老师。。。。。）  —————— 房价不算特别高 可能容不下灵魂    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;建议对自己想去的地方有个目的性，趁早考虑。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;学校和社会生活的差距&#34;&gt;学校和社会生活的差距&lt;/h2&gt;
&lt;h3 id=&#34;思想上的准备落后&#34;&gt;思想上的准备落后&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;   1. 考公务员
   2. 当老师
   3. 事业单位  。。。。。  其实是对找工作没有概念 【学校和社会生活的差距导致围城】 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;社会上温情确实更少一些&#34;&gt;社会上温情确实更少一些&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;    1.抱大腿？大腿你遇不到，小腿不想理你
    2.跨部门的事情，基本是踢皮球
    3. *在外面很难找女朋友* 1. 考虑现实 2.考虑远近 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;中心思想：你要真正断奶，为自己负责，为自己选择（来自家里人的建议，来自老师的建议，来自同学的建议）。&lt;/p&gt;
&lt;h3 id=&#34;一个毛病追求生活的最优解&#34;&gt;一个毛病————追求生活的最优解&lt;/h3&gt;
&lt;p&gt;——————不可能！   生活其实没有最优解，只有不同阶段的局部最优
——————追随心的声音&lt;/p&gt;
&lt;h4 id=&#34;问题我们应该用现在的回报去估计将来的收入曲线吗&#34;&gt;问题：我们应该用现在的回报去估计将来的收入曲线吗？&lt;/h4&gt;
&lt;p&gt;预测基本不可能——————追随心的声音&lt;/p&gt;
&lt;h2 id=&#34;怎么更好的获得回报获得资料工作岗位的需求&#34;&gt;怎么更好的获得回报/获得资料(工作岗位的需求)&lt;/h2&gt;
&lt;p&gt;假设：现在我要去追求二线的某某工作：
1、我要转行吗？做什么？怎么做？
我是电子信息硕士生，不转行&lt;/p&gt;
&lt;p&gt;2、我要做本行吗？做什么？怎么做？&lt;/p&gt;
&lt;h3 id=&#34;第一步信息获取&#34;&gt;第一步：信息获取&lt;/h3&gt;
&lt;p&gt;【获得信息是第一步的关键！】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我导师研究的是什么，我的老师有什么资源——（学术的资源、人脉的资源（公司的联系））
【我能获得什么？】&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;获得对应的学识&lt;/li&gt;
&lt;li&gt;获得对应公司的内推机会&lt;/li&gt;
&lt;li&gt;获得学长学姐的信息&lt;/li&gt;
&lt;li&gt;了解公司的内部好坏和福利（比如宁德时代的一些黑历史）&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;学长学姐和历年就业去向表————找出最优秀的学长学姐 问他们是怎么过的，怎么努力的，怎么去获取资源的（可以请咖啡或者约面谈或者邮件或者微信，相信同校的学长学姐！）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第二步选择方向避免最坏的情况追求好一些的情况但不存在最好的情况&#34;&gt;第二步：选择方向（避免最坏的情况，追求好一些的情况，但不存在最好的情况）&lt;/h3&gt;
&lt;p&gt;电气工程师？做算法工程师？去国家电网？还是去当小学老师？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;给出可能的几个方向&lt;/li&gt;
&lt;li&gt;求交集&lt;/li&gt;
&lt;li&gt;各种找工作的网站 按照  1、关键词 2、城市 遍历每一家公司的招工需求—————获得待遇情况，或者是去搜索待遇曲线以及和学长学姐信息对比。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;第三步根据方向-努力获取信息后努力&#34;&gt;第三步：根据方向 努力！获取信息后努力！&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;【根据社招的要求，去做校招，千万不要沦落到社招！】&lt;/em&gt;
&lt;em&gt;【现在的国情就是校招yyds，应届生yyds，请搞清楚应届生有什么福利（落户政策，人才引进)!!!!!!!!!!!!!!!!!!!!】&lt;/em&gt;
&lt;em&gt;【必须利用好应届生的身份，否则会后悔一辈子】&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自己做个文档（工作方需要什么经历，看重学生的什么素质，招工需要什么技术栈(ASIC\会验证会测试\会FPGA\会python使用EDA验证等）
举个例子：
岗位职责： 1、深入了解ASIC设计及验证流程，可根据芯片设计规格书，编写验证需求，可搭建验证平台并完成验证用例和回归; 2、执行验证计划，编写验证用例，开展递归测试，完成问题的调试和修复； 3、负责芯片IP集成验证以及IP模块验证，有高速接口验证经验者优先; 4、负责SOC系统级验证，并收集、分析和提高验证覆盖率; 5、熟悉FPGA芯片架构，可协助测试工程师完成芯片测试工作。 任职要求： 1、微电子电子工程通信计算机等相关专业硕士及以上学历； 2、熟悉system *** 、OVMUVM等能独立搭建可重用的系统验证平台; 3、熟练掌握perl 、python等脚本语言熟练使用EDA验证工具(如VCS、NCsim等)； 工作认真、积极主动、严谨、敬业、有较强的沟通能力与团队组织协调能力。福利待遇：国企福利，六险二金，做五休二，餐费补助，交通补助，全勤奖，项目津贴，年终奖，健身房，羽乒馆等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;针对技术栈去努力提高，顺便找志同道合的人【群友、交流群、学长学姐（拉学弟学妹下水）】&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第四步社交同样重要&#34;&gt;第四步：社交同样重要！&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;学长学姐&lt;/li&gt;
&lt;li&gt;交流群 群友。。。。。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;为什么要实习&#34;&gt;为什么要实习&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;面试造火箭——实际上拧螺丝 【台积电的例子】&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果在小厂。。。你可能要一个人干三个人的活&lt;/li&gt;
&lt;li&gt;如果在大厂。。。拧螺丝！&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;公司需要的是啥（什么价值？需要你产生什么价值，给公司带来什么，自己的可替代性强不强）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;弥补学校与社会的鸿沟&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;攒经验，刷履历&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;向小朱学习！！！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;舔狗的艺术&#34;&gt;舔狗的艺术&lt;/h2&gt;
&lt;p&gt;（找一切机会向优秀的大佬们学习）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比起以后不能多请老婆喝一杯奶茶的委屈，比起以后不能多给儿子买一根棒棒糖的委屈，自己舔狗又有什么委屈的？&lt;/li&gt;
&lt;li&gt;说不定就舔到了呢？  都是小概率事件，值得尝试！&lt;/li&gt;
&lt;li&gt;不被理睬才是最正常的现象，如果有就带上感谢！没有也没关系，这很正常！&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;面子的问题怎么解决反正几十年后大家都入土了没什么好怕的&#34;&gt;面子的问题怎么解决————反正几十年后大家都入土了，没什么好怕的&lt;/h4&gt;
&lt;h2 id=&#34;战胜遗忘的方法&#34;&gt;战胜遗忘的方法：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;复习&lt;/li&gt;
&lt;li&gt;复习&lt;/li&gt;
&lt;li&gt;复习
（推荐一款app  memory helper 根据遗忘曲线安排你应该什么时候复习什么 免费！）&lt;/li&gt;
&lt;li&gt;干中学为什么忘得慢？ 因为你天天都得干&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;做这些的目的是&#34;&gt;做这些的目的是。。。？&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;青春一去不复返！&lt;/li&gt;
&lt;li&gt;获得更好的报酬&lt;/li&gt;
&lt;li&gt;看到更好的自己&lt;/li&gt;
&lt;li&gt;活在短暂未来的自己&lt;/li&gt;
&lt;li&gt;比起炒股，你能做好的也就是这些了&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>完美安装paddle、PPOCRLabel、eiseg(linux)</title>
        <link>https://sanbuphy.github.io/p/%E5%AE%8C%E7%BE%8E%E5%AE%89%E8%A3%85paddleppocrlabeleiseglinux/</link>
        <pubDate>Sat, 19 Feb 2022 20:45:40 +0800</pubDate>
        
        <guid>https://sanbuphy.github.io/p/%E5%AE%8C%E7%BE%8E%E5%AE%89%E8%A3%85paddleppocrlabeleiseglinux/</guid>
        <description>&lt;p&gt;中心思想：遇事不决，降低版本 （numpy,paddlepaddle,opencv）&lt;/p&gt;
&lt;h3 id=&#34;以防万一的操作&#34;&gt;以防万一的操作&lt;/h3&gt;
&lt;p&gt;1.安装PyQt5&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install python3-pyqt5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2.安装qt-designer&lt;/p&gt;
&lt;p&gt;&lt;code&gt; sudo apt-get install qt5-default qttools5-dev-tools&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;#命令行输入designer可测试是否安装成功&lt;/p&gt;
&lt;h2 id=&#34;推荐安装流程从新建虚拟环境到安装一条龙服务&#34;&gt;推荐安装流程（从新建虚拟环境到安装一条龙服务）&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;请严格按照顺序！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;#[装错了想卸载重装，把install改成uninstall 不要加包括-i在内后面的信息即可]&lt;/p&gt;
&lt;p&gt;#创建虚拟环境&lt;/p&gt;
&lt;p&gt;&lt;code&gt;conda create -n 改成你的虚拟环境名字 python=3.7&lt;/code&gt;   【3.7别打3.9】&lt;/p&gt;
&lt;p&gt;#进入虚拟环境&lt;/p&gt;
&lt;p&gt;&lt;code&gt;conda activate 改成刚才你的虚拟环境名字&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;#装坏了想炸掉虚拟环境（&lt;strong&gt;慎重&lt;/strong&gt;别打错了）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;conda remove -n 你的虚拟环境名字 --all&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;#此时你能看到终端左侧显示环境名，接下来安装各类程序&lt;/p&gt;
&lt;p&gt;#注：这里采用百度源作为示范，你也可以使用清华源：&lt;/p&gt;
&lt;p&gt;&lt;code&gt; -i https://pypi.tuna.tsinghua.edu.cn/simple&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;#升级pip&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install --upgrade pip -i https://mirror.baidu.com/pypi/simple	&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;#以防万一的操作&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install qtpy -i https://mirror.baidu.com/pypi/simple &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install pyqt5 -i https://mirror.baidu.com/pypi/simple &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;#安装paddle &lt;a class=&#34;link&#34; href=&#34;https://github.com/PaddlePaddle/Paddle&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;github主页面&lt;/a&gt; 【这里采用的是cpu，如果要gpu详细安装过程参考&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/431985052&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;gpu怎么看&lt;/a&gt;】&lt;/p&gt;
&lt;p&gt;（如果出现问题可以在paddlepaddle后面加上==2.1.0安装旧版本）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python -m pip install paddlepaddle -i https://mirror.baidu.com/pypi/simple&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;#安装PPOCRLabel（OCR）  &lt;a class=&#34;link&#34; href=&#34;https://github.com/PaddlePaddle/PaddleOCR/blob/release/2.4/PPOCRLabel/README_ch.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;github主页面&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt; pip install PPOCRLabel -i https://mirror.baidu.com/pypi/simple&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt; pip install  trash-cli -i https://mirror.baidu.com/pypi/simple&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;#安装EISeg（图像处理） &lt;a class=&#34;link&#34; href=&#34;https://github.com/PaddlePaddle/PaddleSeg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;github主页面&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;code&gt;pip install eiseg -i https://mirror.baidu.com/pypi/simple &lt;/code&gt;  #只输入这个就行&lt;/p&gt;
&lt;p&gt;​	&lt;code&gt;pip install paddleseg -i https://mirror.baidu.com/pypi/simple &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;#【最后】安装旧版本opencv（如果装了请先卸载）&lt;/p&gt;
&lt;p&gt;&lt;code&gt; pip install opencv-python==4.2.0.32 -i https://mirror.baidu.com/pypi/simple&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;#接着测试ocr和eiseg：首先输入&lt;code&gt;PPOCRLabel --lang ch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;#如果此时出现一段加载过程，最后出现界面，就说明你安装成功了！！&lt;/p&gt;
&lt;p&gt;#再次输入： &lt;code&gt;eiseg&lt;/code&gt; 这时候大概率已经成功打开！&lt;/p&gt;
&lt;h3 id=&#34;倒霉人请看这&#34;&gt;倒霉人请看这&lt;/h3&gt;
&lt;p&gt;如果eiseg打开不成功可以尝试曲线方案（先安装这些依赖库）：&lt;/p&gt;
&lt;p&gt;(pip不成功就改成conda)&lt;/p&gt;
&lt;p&gt;#首先先把paddleseg的整个项目clone到本地  （以下安装还打不开可以这么做）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;conda install gdal&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install qtpy&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip instal pyqt5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install easydict&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install scikit-image&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这时候再进入即可！  （如果你还是打不开，就clone后进入eiseg子文件，按照&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/435111803&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;这个帖子&lt;/a&gt;运行exe.py	）&lt;/p&gt;
&lt;p&gt;最后使用conda deactivate退出虚拟环境！！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>目标检测相关资料汇总</title>
        <link>https://sanbuphy.github.io/p/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/</link>
        <pubDate>Tue, 08 Feb 2022 15:28:17 +0800</pubDate>
        
        <guid>https://sanbuphy.github.io/p/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/</guid>
        <description>&lt;p&gt;备注:我正在写一份目标检测&amp;amp;图像异常检测的综述slides，如果有兴趣可以等我出！欢迎邮件催更提建议：physicoada@gmail.com&lt;/p&gt;
&lt;h2 id=&#34;opencv基础&#34;&gt;opencv基础：&lt;/h2&gt;
&lt;p&gt;推荐参考：
&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV12V411q7Sp/?spm_id_from=333.788&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;基于Python的Opencv全系列速成课&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1Hm4y1X7s9/?spm_id_from=333.788&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;3天建立计算机视觉移动应用程序-支持iOS与Android&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV11X4y1N7cQ/?spm_id_from=333.788&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;无人机编程与Python教学&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;项目地址：https://github.com/jasmcaus/opencv-course&lt;/p&gt;
&lt;h2 id=&#34;几个大型综述&#34;&gt;几个大型综述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://arxiv.org/abs/1905.05055&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Object Detection in 20 Years: A Survey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相关笔记：&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/192362333&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/192362333&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_29462849/article/details/118231407&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;综述：目标检测二十年（2001-2021）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/ciao/articles/10892921.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;目标检测近5年发展历程概述，从R-CNN到RFBNet（2013&amp;ndash;2018）&lt;/a&gt; (韩国人整的)&lt;/li&gt;
&lt;li&gt;目标检测：Anchor-Free时代 - 陀飞轮的文章 - 知乎 &lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/62103812&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/62103812&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CVPR 2021 论文大盘点-目标检测篇 - 我爱计算机视觉的文章 - 知乎 &lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/387510116&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/387510116&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;目标检测的精进路径 - mileistone的文章 - 知乎 &lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/266648028&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/266648028&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;目标检测入门，看这篇就够了（上） - 最刚烈的文章 - 知乎 &lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/60120331&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/60120331&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;国内做深度学习目标检测的有哪些大牛和厉害的课题组？ - Amusi的回答 - 知乎 &lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/330390445/answer/723973941&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zhihu.com/question/330390445/answer/723973941&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;iccv-2021-结果出炉最新200篇iccv2021论文分方向汇总更新中&#34;&gt;ICCV 2021 结果出炉！最新200篇ICCV2021论文分方向汇总（更新中）&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/392575669&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/392575669&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/354043252&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/354043252&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;7cvpr2021论文分方向盘点&#34;&gt;7.CVPR2021论文分方向盘点&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/extreme-assistant/CVPR2021-Paper-Code-Interpretation#7&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/extreme-assistant/CVPR2021-Paper-Code-Interpretation#7&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一文看尽 27 篇 CVPR2021 2D 目标检测论文 &lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/s/Ho7qtrpF9FhHGaamkQo6Lw&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mp.weixin.qq.com/s/Ho7qtrpF9FhHGaamkQo6Lw&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CVPR 2020 论文大盘点-目标检测篇&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://bbs.cvmart.net/articles/2732&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bbs.cvmart.net/articles/2732&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;其他&#34;&gt;其他&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;《目标检测》-第24章-YOLO系列的又一集大成者：YOLOX！&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/391396921&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/391396921&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;目标检测可以先从成熟框架开始上手，比如mmdetection和detectron2。 如果基础。。。。。。目标检测该怎么学呀，目前研一，老师啥也不会，感觉毕不了业了？ - 小小将的回答 - 知乎 &lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/510784176/answer/2305603811&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zhihu.com/question/510784176/answer/2305603811&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;系统地学习目标检测可以遵从下面的学习路线：
1.&lt;strong&gt;学习经典工作&lt;/strong&gt;。经典工作包括RCNN系列（RCNN、Fast RCNN、Faster RCNN），宏观上可以学习到什么是目标检测、目标检测是做什么的，微观上可以学习到诸如Region Proposal Network（后续one-stage工作的基础）、Anchor box等基础技术。这个系列后来被划定为“two-stage”工作，检测精度好、速度要慢一些。随后，再学习早期的YOLO系列工作（YOLOv1、YOLOv2），宏观上可以学习到什么是one-stage目标检测方法、如何进行端到端的训练和推理，同时，学习SSD，可以初次接触到多级检测方法——使用更多的&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/search?q=%e7%89%b9%e5%be%81%e5%9b%be&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7b%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2305881442%7d&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;特征图&lt;/a&gt;去检测不同大小的物体。最后，学习FPN、YOLOv3以及RetinaNet（Focal loss），掌握当下主流检测框架“分而治之”方法。学习玩这些经典工作，最好能从中挑选出一至两个工作，进行复现，那么，目标检测就入门了。目标检测该怎么学呀，目前研一，老师啥也不会，感觉毕不了业了？ - Kissrabbit的回答 - 知乎 &lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/510784176/answer/2305881442&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zhihu.com/question/510784176/answer/2305881442&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;目标检测（Object Detection）入门概要&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/f290131665/article/details/81012556&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.csdn.net/f290131665/article/details/81012556&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/112640903&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;目标检测位置回归损失函数整理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/104236411&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;目标检测回归损失函数简介：SmoothL1/IoU/GIoU/DIoU/CIoU Loss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/zijin0802034/article/details/77685438&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;边框回归(Bounding Box Regression)详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/yangyehuisw/article/details/114918951&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Faster RCNN 中检测框位置回归是怎么做的&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/27467369&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;目标检测（1）-Selective Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/zyly/p/9259392.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;第三十三节，目标检测之选择性搜索-Selective Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/u011974639/article/details/78053203?locationNum=7&amp;amp;fps=1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Object Detection&amp;ndash;RCNN,SPPNet,Fast RCNN，FasterRCNN论文详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.sohu.com/a/364671359_100007727&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;什么是anchor-based 和anchor free？ &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>小猫也能看懂的反向传播算法</title>
        <link>https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/</link>
        <pubDate>Sat, 29 Jan 2022 16:18:00 +0800</pubDate>
        
        <guid>https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/</guid>
        <description>&lt;img src="https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/jeff-rodgers-DaPabnoYMKc-unsplash.jpg" alt="Featured image of post 小猫也能看懂的反向传播算法" /&gt;&lt;p&gt;在介绍具体的算法之前，我们得先认识一下神经网络以及为什么要构造这样的神经网络。
注，如果你对神经网络的发展史感兴趣，可参考&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/subconscious/p/5058741.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;神经网络浅讲：从神经元到深度学习&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;神经网络基础&#34;&gt;神经网络基础&lt;/h2&gt;
&lt;p&gt;首先，我们知道人的神经网络是由神经元组成的，每个神经元与其他神经元相连。当某个神经元 “兴奋”时, 就会向相连的神经元发送化学物质，改变这些神经元内的电位；如果某神经元的电位超过了一个“阈值” ( threshold), 那么它就会被激活，即 “兴奋” 起来，接着向向其他神经元发送化学物质。   &lt;br&gt;
我们可以把神经元抽象成“神经单元”，即从&lt;strong&gt;单纯的输入0或1，阶跃函数型激活模式，输出0或1（即点火）&lt;strong&gt;的生物模型；变为&lt;/strong&gt;允许输入任何模型框架内数值，自选激活函数且将结果转化为兴奋度&lt;/strong&gt;的一般模型。 &lt;br&gt;
一般的，我们常用sigmoid函数作为激活函数，如果你想了解其他激活函数，可以自行搜索（网络上真的很多）：  &lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 225; 
			flex-basis: 541px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/shenjing1.png&#34; data-size=&#34;708x314&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/shenjing1.png&#34;
			width=&#34;708&#34;
			height=&#34;314&#34;
			srcset=&#34;https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/shenjing1_hu96e35c1fb03766fbb920d20802a4cbcd_85711_480x0_resize_box_3.png 480w, https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/shenjing1_hu96e35c1fb03766fbb920d20802a4cbcd_85711_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;MP神经元模型 by：周志华-机器学习&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;MP神经元模型 by：周志华-机器学习&lt;/figcaption&gt;
	
&lt;/figure&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 214; 
			flex-basis: 514px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/shenjing2.png&#34; data-size=&#34;772x360&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/shenjing2.png&#34;
			width=&#34;772&#34;
			height=&#34;360&#34;
			srcset=&#34;https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/shenjing2_huf0c7ad51a6d125d3535def1e49e98a0f_53580_480x0_resize_box_3.png 480w, https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/shenjing2_huf0c7ad51a6d125d3535def1e49e98a0f_53580_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;常见激活函数 by：周志华-机器学习&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;常见激活函数 by：周志华-机器学习&lt;/figcaption&gt;
	
&lt;/figure&gt;
由上可知，神经单元可以拆解为三大要素：
$$
\text{输入：} z=w_1x_1+\cdots +w_nx_n+b\cdot 1
\\
\text{输出：} a=f\left( z \right)
\\
\text{激活函数：}f\left( z \right) =\frac{1}{1+e^{-z}}
$$
其中b为偏置（为了形式美观，我们令阈值 $ \theta = -b $ ），b·1的意思是常数1作为b对应的输入值（这样可以在之后将等式写成更美观的矩阵，类似多元回归时把常数放入矩阵的操作）    &lt;br&gt;
有了神经单元，把他们连接后就形成了神经网络（不同层的作用将在下部分给出）
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 136; 
			flex-basis: 326px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/shenjing3.PNG&#34; data-size=&#34;565x415&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/shenjing3.PNG&#34;
			width=&#34;565&#34;
			height=&#34;415&#34;
			srcset=&#34;https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/shenjing3_hu3f13d4a903d68ecc4c0d4bea7e1ef2fa_116603_480x0_resize_box_3.PNG 480w, https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/shenjing3_hu3f13d4a903d68ecc4c0d4bea7e1ef2fa_116603_1024x0_resize_box_3.PNG 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;阶层型神经网络 by：深度学习的数学&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;阶层型神经网络 by：深度学习的数学&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;神经网络的运作原理&#34;&gt;神经网络的运作原理&lt;/h2&gt;
&lt;p&gt;假设，你是一只爱吃“0”与“1”图样猫粮且非常挑食的小猫，出于懒惰，你想让计算机帮自己把这两类图案的猫粮完全区分。在以前，我们学过了分类法的线性回归(逻辑回归)，单纯的二维数据点分类不是件难事，但当我们遇到图像后该怎么办呢？为了方便，我们需要引入上述的神经网络。 &lt;br&gt;
为了引入神经网络，首先需要对猫粮图案处理成计算机可识别的内容，我们可以这样进行编号：（举例图案为4x3的格子）
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 259; 
			flex-basis: 621px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/shenjing4.png&#34; data-size=&#34;943x364&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/shenjing4.png&#34;
			width=&#34;943&#34;
			height=&#34;364&#34;
			srcset=&#34;https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/shenjing4_hu2e9223918525cf31f51e7561fe0417c1_11841_480x0_resize_box_3.png 480w, https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/shenjing4_hu2e9223918525cf31f51e7561fe0417c1_11841_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;将猫粮的0/1图案使用格子划分&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;将猫粮的0/1图案使用格子划分&lt;/figcaption&gt;
	
&lt;/figure&gt;
其中编号代表有多少个信号源输入，信号输入的大小可以根据黑白设定，给出相应的0/1。（比如黑格子给神经元1的输入，白格子为0的输入）
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 185; 
			flex-basis: 444px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/shenjing5.png&#34; data-size=&#34;844x456&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/shenjing5.png&#34;
			width=&#34;844&#34;
			height=&#34;456&#34;
			srcset=&#34;https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/shenjing5_hu3230b5ef4a6d3bdc519a46dd3bf63163_135554_480x0_resize_box_3.png 480w, https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/shenjing5_hu3230b5ef4a6d3bdc519a46dd3bf63163_135554_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;将图像信息输入神经网络&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;将图像信息输入神经网络&lt;/figcaption&gt;
	
&lt;/figure&gt;  &lt;br&gt;
在这里为了简化，我们只有简单的三层，一层输入，一层隐藏层（你可以理解为进一步处理数据），一层输出（用于判断结果是0还是1）。我们把它称为&lt;strong&gt;两层神经网络&lt;/strong&gt;（有些地方觉得输入层需要计入，但在此我们采用“因为输入层不活动只是输入”的观点，将输入层排除在层数计算外）    &lt;br&gt;
有了数据输入，接下来便需要进一步认识神经单元的符号语言，从而理解数据在神经网络中是怎么传导的。（此处友情建议复习小节一的神经单元三大要素）
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 228; 
			flex-basis: 547px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/shenjing6.png&#34; data-size=&#34;659x289&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/shenjing6.png&#34;
			width=&#34;659&#34;
			height=&#34;289&#34;
			srcset=&#34;https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/shenjing6_hu947275a1b30ddb8a3e29420e1516031c_75137_480x0_resize_box_3.png 480w, https://sanbuphy.github.io/p/%E5%B0%8F%E7%8C%AB%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/shenjing6_hu947275a1b30ddb8a3e29420e1516031c_75137_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;神经单元的符号语言&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;神经单元的符号语言&lt;/figcaption&gt;
	
&lt;/figure&gt;   如何理解这套符号呢？如图所示，“我们现在所研究的”对象是第L层的第j个神经单元，而他前一层的神经网络即为L-1层，且我们设前一层神经单元的标号为i。根据这套符号以及我们前面学到的神经单元三大要素，我们知道了第L层第j个神经单元的输入为 $ \mathrm{z}_{j}^{l} $，输出为 $ \mathrm{a}_{j}^{l} $ ,其中b为偏置，且L-1层第i个神经单元对L层第j个神经单元的影响权重为 $\mathrm{w}_{ji}^{l}$，激活函数负责把神经单元的“左半边”变成右半边的输出。（注，有些地方权重编号的ji可能互换为ij，但不影响最后结果）&lt;/p&gt;
&lt;p&gt;有了神经网络，我们自然想到它到底有什么用？让我们回望初心——分类，我们的目的是通过模型对样本进行分类；操作是通过对训练集的学习，将某种参数决定下的模型预测值（某种特征）与对应的现实特征比较，让现实和预测的差别尽量小，从而实现分类的效果。而神经网络也是如此，决定分类结果的是输出层，我们可以设输出层（参考上面出现的两层神经网络）的第一个神经单元的输出值 $a_1^3$ 在图样为1的时候接近1（现实目标为1），第二个神经单元的输出值 $a_2^3$在图样为0的时候接近1（显示目标为0），即为：（注意，值为1表示的是神经单元“兴奋”）&lt;/p&gt;
&lt;h3 id=&#34;为什么需要梯度下降法&#34;&gt;为什么需要梯度下降法&lt;/h3&gt;
&lt;h3 id=&#34;前向传播原理&#34;&gt;前向传播原理&lt;/h3&gt;
&lt;h3 id=&#34;反向传播原理&#34;&gt;反向传播原理&lt;/h3&gt;
&lt;h3 id=&#34;一般化处理&#34;&gt;一般化处理&lt;/h3&gt;
&lt;h2 id=&#34;浅析西瓜书中的bp算法&#34;&gt;浅析西瓜书中的BP算法&lt;/h2&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/71892752&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;温故知新——前向传播算法和反向传播算法（BP算法）及其推导&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/jsfantasy/p/12177275.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;反向传播算法详细推导&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV16x411V7Qg?p=2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;深度学习之反向传播算法 上/下 Part 3 ver 0.9 beta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《深度学习的数学》 涌井良幸 涌井贞美&lt;/li&gt;
&lt;li&gt;《机器学习 Machine Learning》 周志华&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>机器学习中的信息论基础</title>
        <link>https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E8%AE%BA%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Sat, 22 Jan 2022 22:34:11 +0800</pubDate>
        
        <guid>https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E8%AE%BA%E5%9F%BA%E7%A1%80/</guid>
        <description>&lt;img src="https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E8%AE%BA%E5%9F%BA%E7%A1%80/michael-sum-LEpfefQf4rU-unsplash.jpg" alt="Featured image of post 机器学习中的信息论基础" /&gt;&lt;p&gt;首先，我们需要认识什么是信息量与信息熵:&lt;/p&gt;
&lt;h2 id=&#34;自信息量&#34;&gt;自信息量&lt;/h2&gt;
&lt;p&gt;通常自信息可以从两个方面来理解:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;自信息是事件发生前,事件发生的不确定性。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自信息表示事件发生后,事件所包含的信息量。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(比如你看到这，会想问作者也许不是一只猫而是人类————那我当然不是猫，这就没有不确定性可言，没有什么信息量；如果有一天我真的是猫了，那便是大新闻了！！) &lt;br&gt;
自然而然，我们会想到所谓信息量应当与概率有关，且应该可以加合（两个事件发生时带来的信息量应该是分别发生时的和），也就是满足以下特质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$f\left( P \right) &amp;gt;0 \; \; \; \; P\left( x \right) \in \left( 0,1 \right) $&lt;/li&gt;
&lt;li&gt;$f\left( P_A·P_B \right) =f\left( P_A \right) +f\left( P_B \right) $&lt;/li&gt;
&lt;li&gt;$f\left( 1 \right) =0$&lt;/li&gt;
&lt;li&gt;事件发生概率越大，自信息量越小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此时我们可以才想到对数会满足这样的性质，于是可以给出：$I\left( x \right) =-\log \left( P\left( x \right) \right) $       &lt;br&gt;
因为在计算机领域中习惯用二进制，所以我们通常以2为底，这样自信息量的单位就为比特bit,——即二进制数的一位包含的信息或2个选项中特别指定1个的需要信息量。而机器学习中常选择以e为底，单位为奈特nats       &lt;br&gt;
你可以通过以下例题来更好的理解自信息量：&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 213; 
			flex-basis: 513px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E8%AE%BA%E5%9F%BA%E7%A1%80/chigua3.png&#34; data-size=&#34;849x397&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E8%AE%BA%E5%9F%BA%E7%A1%80/chigua3.png&#34;
			width=&#34;849&#34;
			height=&#34;397&#34;
			srcset=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E8%AE%BA%E5%9F%BA%E7%A1%80/chigua3_hu8329c2e9843336c3f6e3de434640aacf_63036_480x0_resize_box_3.png 480w, https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E8%AE%BA%E5%9F%BA%E7%A1%80/chigua3_hu8329c2e9843336c3f6e3de434640aacf_63036_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;以2为底的对数符号lb&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;以2为底的对数符号lb&lt;/figcaption&gt;
	
&lt;/figure&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 136; 
			flex-basis: 328px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E8%AE%BA%E5%9F%BA%E7%A1%80/chigua4.png&#34; data-size=&#34;738x539&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E8%AE%BA%E5%9F%BA%E7%A1%80/chigua4.png&#34;
			width=&#34;738&#34;
			height=&#34;539&#34;
			srcset=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E8%AE%BA%E5%9F%BA%E7%A1%80/chigua4_hu7358e9233fa379eb929803dca2e43690_148517_480x0_resize_box_3.png 480w, https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E8%AE%BA%E5%9F%BA%E7%A1%80/chigua4_hu7358e9233fa379eb929803dca2e43690_148517_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;信息熵&#34;&gt;信息熵&lt;/h2&gt;
&lt;p&gt;接下来，我们将进一步研究什么是信息熵，在前面我们学会了如何衡量一个事件的不确定性，但一个随机变量可能包含的多个事件，我们该如何对这个 &lt;strong&gt;随机变量的不确定性&lt;/strong&gt; 进行刻画呢？   &lt;br&gt;
我们会自然想到求出所有事件的信息量期望，且熵越大，事件的不确定性越强，当满足均匀分布时熵最大(有约束情况下要额外考虑，一阶矩二阶矩不同时的最大熵分布不同，详情可参考最大熵原理）；如果熵值小，证明某个事件发生的概率比较大，随机变量取某个值的概率大，不确定性就小了。(另外，信息熵也可以理解为解除信源不确定性所需要的信息量)
于是我们给出： (其中规定)$0\log 0=0$
$$
H\left( x \right) =-\sum_{i=1}^n{p\left( x_i \right) \log \left( p\left( x_i \right) \right)}
$$
我们可以验证，当n个事件满足等概率分布时其中当结果为logn（n为总数）信息熵达到最大值。   &lt;br&gt;
另外可以给出条件熵(你可以运用条件概率辅助理解)：
$$
H\left( Y|X \right) =-\sum_x{\sum_y{p\left( xy \right) \log P\left( y|x \right) =\sum_x{-\sum_y{P\left( y|x \right) \log P\left( x \right) =\sum_x{P\left( x \right) H\left( Y|x \right)}}}}}
$$&lt;/p&gt;
&lt;h2 id=&#34;相对熵&#34;&gt;相对熵&lt;/h2&gt;
&lt;p&gt;如果我们对于同一个随机变量x有两个单独的概率分布P(x) 和 Q(x)，我们可以使用KL散度（Kullback-Leibler (KL) divergence）或者叫相对熵来衡量这&lt;strong&gt;两个分布的差异情况&lt;/strong&gt;，其中p对q的相对熵写作(在机器学习中，我们可以把P(x)看作真实分布，而Q(x)作为预测的分布)：
$$
D_{KL}\left(p||q \right) =\sum_x{p\left( x \right) \log \frac{p\left( x \right)}{q\left( x \right)}=E_{p\left( x \right)}\log \frac{p\left( x \right)}{q\left( x \right)}}
$$
同时KL散度还满足以下条件：
$$
D_{KL}\left(p||q \right) \ne D_{KL}(q||p)
\\
D_{KL}\left(
p||q\right) \geqslant 0
$$
对于第一个式子，我们可以借助以下内容理解：
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 113; 
			flex-basis: 273px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E8%AE%BA%E5%9F%BA%E7%A1%80/chigua5.png&#34; data-size=&#34;827x727&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E8%AE%BA%E5%9F%BA%E7%A1%80/chigua5.png&#34;
			width=&#34;827&#34;
			height=&#34;727&#34;
			srcset=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E8%AE%BA%E5%9F%BA%E7%A1%80/chigua5_hue3bf3906151592c8066971d242d88c99_188105_480x0_resize_box_3.png 480w, https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E8%AE%BA%E5%9F%BA%E7%A1%80/chigua5_hue3bf3906151592c8066971d242d88c99_188105_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;by Deep Learning.Ian Goodfellow and Yoshua Bengio and Aaron Courville&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;by Deep Learning.Ian Goodfellow and Yoshua Bengio and Aaron Courville&lt;/figcaption&gt;
	
&lt;/figure&gt;
用比较通俗的话来说，让我们回到公式之中，且注意到P(x)作为真实分布，Q(x)作为预测的分布；&lt;/p&gt;
&lt;p&gt;$$
D_{KL}\left( p||q \right) =E_{p\left( x \right)}\log \frac{p\left( x \right)}{q\left( x \right)}
$$&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当第一种情况，如果P(x)是较大的，那么q(x)也应该较大来保证相对熵最小化；如果P(x)是较小的，那实际上q(x)的大小对相对熵影响不大；所以我们只需要特别注意前者的情况。此时在看图你就可以更加理解了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$
D_{KL}\left( q||p \right) =E_{q\left( x \right)}\log \frac{q\left( x \right)}{p\left( x \right)}
$$&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;当第二种情况，很显然会与第一种情况相反，如果P(x)是较小的，那么q(x)也应该较小来保证相对熵最小化————这就是为什么说图中提到概率小的地方比较重要，而q(x)较大的时候就影响不大了。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;交叉熵&#34;&gt;交叉熵&lt;/h2&gt;
&lt;p&gt;接下来我们要了解常用的一种更常用的熵————交叉熵，由前面学到的相对熵可以进一步推导：&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
D_{KL}\left( p||q \right) &amp;amp;=\sum_{i=1}^n{p\left( x_{\mathrm{i}} \right) \log \left( \frac{p\left( x_i \right)}{q\left( x_i \right)} \right)}\\
\mathrm{
}&amp;amp;=\sum_{i=1}^n{p\left( x_i \right) \log \left( p\left( x_i \right) \right)}-\sum_{i=1}^n{p\left( x_i \right)}\log \left( q\left( x_i \right) \right)\\
&amp;amp;=-H\left( p \right) -\sum_{i=1}^n{p\left( x_i \right)}\log \left( q\left( x_i \right) \right)\
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;其中第一项我们可通过推导得知是针对真实分布概率p(x)的信息熵，而后一项我们定义为交叉熵；
$$
H\left( p,q \right) =-\sum_{i=1}^n{p\left( x_i \right)}\log \left( q\left( x_i \right) \right)
$$
交叉熵可以理解为，&lt;strong&gt;消除体系不确定性所需要付出的努力大小&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;交叉熵与极大似然估计的联系&#34;&gt;交叉熵与极大似然估计的联系&lt;/h3&gt;
&lt;p&gt;由于真实分布的信息熵是确定的，在优化过程中（最小化相对熵），我们可以把他忽略，只看交叉熵的部分。此外，最小化交叉熵其实与极大似然估计是等价的，具体证明如下：（参考Deep Learning.Ian Goodfellow and Yoshua Bengio and Aaron Courville）       &lt;br&gt;
我们考虑一组含有m个样本的数据集$\mathbf{X}=({ x^{(1)},\cdots ,x^{(m)} }) $,此时可以定义 $ \theta $ 的极大似然为(其中P为模型的联合概率)：(如果你不懂argmax是什么意思可以参考&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/79383099&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;argmax科普&lt;/a&gt;)
$$
\begin{aligned}
\mathbf{\theta }_{ML}&amp;amp;=\underset{\theta}{\mathrm{argmax}}P_{model}\left( \mathbf{X};\theta \right)\\
\mathrm{
}&amp;amp;=\underset{\theta}{\mathrm{argmax}}\prod_{i=1}^m{P_{model}\left( \boldsymbol{x}^{\left( i \right)};\theta \right)}
\end{aligned}
$$
由于乘积不好计算，我们可以取log将他转换为加和形式，取最值时的参数不变；且可以乘上不影响结果的 $ \frac{1}{m} $。
$$
\begin{aligned}
\mathbf{\theta }_{ML}&amp;amp;=\underset{\theta}{\mathrm{argmax}}\sum_{i=1}^m \mathrm{log} {P_{model}\left( \boldsymbol{x}^{\left( i \right)};\theta \right)}\\
\mathrm{
}&amp;amp;=\underset{\theta}{\mathrm{argmax}}\frac{1}{m}\sum_{i=1}^m \mathrm{log} {P_{model}\left( \boldsymbol{x}^{\left( i \right)};\theta \right)}
\end{aligned}
$$
由大数定律可知（算术平均值依概率收敛于期望）：
$$
\frac{1}{m}\sum_{i=1}^m{X_i\longrightarrow} \mu
$$
可以将原式进一步化为：
$$
\begin{aligned}
\mathbf{\theta }_{ML}&amp;amp;=\underset{\theta}{\mathrm{arg}\max}\mathbb{E}_{\mathbf{x}~\hat{p}_{data}}\log P_{model}\left( \boldsymbol{x};\boldsymbol{\theta } \right)\\
&amp;amp;=\underset{\theta}{\mathrm{arg}\max}\sum_x{p\left( x \right) \log q\left( x \right)}\\
&amp;amp;=\underset{\theta}{\mathrm{arg}\min}\left[ -\sum_x{p\left( x \right) \log q\left( x \right)} \right]\\
\end{aligned}
$$
Bravo!!! 此时你惊喜的发现这就是我们前面推导得到的交叉熵公式，至此，对于真实分布和模型分布，我们明白了MLE方法（让似然最大化）等价于两者间交叉熵的最小化。好奇的你也许想问“MLE与KL散度也是共通的吗？”————这个问题你可以自己试试看，就用上式类似办法加常数即可！&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/wangguchangqing/p/12068084.html#autoid-0-1-0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;一文搞懂交叉熵损失&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/kyrieng/p/8694705.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;详解机器学习中的熵、条件熵、相对熵和交叉熵 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.doc88.com/p-5763943323651.html?r=1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;信息论基础&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/355150033&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;数字世界逼近现实世界——浅谈分布近似与最大似然估计&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>《机器学习》西瓜书笔记(二)</title>
        <link>https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/</link>
        <pubDate>Mon, 17 Jan 2022 22:53:41 +0800</pubDate>
        
        <guid>https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/</guid>
        <description>&lt;p&gt;本文为个人对西瓜书不成熟的一些理解和资料整理，欢迎批评指出意见，谢谢！(可邮箱联系physicoada@gmail.com)&lt;/p&gt;
&lt;h2 id=&#34;西瓜书章节三--线性模型&#34;&gt;西瓜书章节三  线性模型&lt;/h2&gt;
&lt;p&gt;文字版浓缩可参考：&lt;a class=&#34;link&#34; href=&#34;https://github.com/Vay-keen/Machine-learning-learning-notes/blob/master/%E5%91%A8%E5%BF%97%E5%8D%8E%E3%80%8AMachine%20Learning%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%284%29--%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;周志华机器学习笔记 by:Vay-keen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简略而言，本章主要涉及到三大块内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线性回归及极大似然估计&lt;/li&gt;
&lt;li&gt;对数几率回归及交叉熵思想&lt;/li&gt;
&lt;li&gt;二分类线性判别分析&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数学基础&#34;&gt;数学基础&lt;/h3&gt;
&lt;h4 id=&#34;极大似然估计&#34;&gt;极大似然估计&lt;/h4&gt;
&lt;h4 id=&#34;凸函数&#34;&gt;凸函数&lt;/h4&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 70; 
			flex-basis: 169px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/chigua2.jpg&#34; data-size=&#34;2182x3086&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/chigua2.jpg&#34;
			width=&#34;2182&#34;
			height=&#34;3086&#34;
			srcset=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/chigua2_huafcd3297fe575c7ac67533b0df971f22_374632_480x0_resize_q75_box.jpg 480w, https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/chigua2_huafcd3297fe575c7ac67533b0df971f22_374632_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;
本图来自：&lt;a class=&#34;link&#34; href=&#34;https://www.pianshen.com/article/98061511620/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;凸函数的四种判断方法&lt;/a&gt;
多元函数判别法(Hessian矩阵正定性)：&lt;/p&gt;
&lt;p&gt;机器学习中凸函数的好处：函数具有唯一的极小值。这意味着我们求得的模型是全局最优，不会陷入局部最优（想象一下无数波浪的函数，难以在梯度下降中找到最小值）。&lt;/p&gt;
&lt;h4 id=&#34;信息熵相对熵与交叉熵&#34;&gt;信息熵、相对熵与交叉熵&lt;/h4&gt;
&lt;p&gt;请参考数学专栏中的文章（机器学习中的信息论基础）&lt;/p&gt;
&lt;h4 id=&#34;拉格朗日乘子法&#34;&gt;拉格朗日乘子法&lt;/h4&gt;
&lt;h3 id=&#34;线性回归&#34;&gt;线性回归&lt;/h3&gt;
&lt;h4 id=&#34;矩阵推导&#34;&gt;矩阵推导&lt;/h4&gt;
&lt;p&gt;矩阵求导方法及其完整过程请参考我的另外一篇文章：&lt;a class=&#34;link&#34; href=&#34;https://sanbuphy.github.io/p/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC%E7%AE%80%E6%98%93%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;矩阵求导建议入门手册&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;极大似然估计法&#34;&gt;极大似然估计法&lt;/h4&gt;
&lt;h3 id=&#34;对数几率回归逻辑回归&#34;&gt;对数几率回归(逻辑回归)&lt;/h3&gt;
&lt;h4 id=&#34;极大似然估计法-1&#34;&gt;极大似然估计法&lt;/h4&gt;
&lt;h3 id=&#34;线性判别分析&#34;&gt;线性判别分析&lt;/h3&gt;
&lt;h3 id=&#34;多分类学习&#34;&gt;多分类学习&lt;/h3&gt;
&lt;h4 id=&#34;ecoc码&#34;&gt;ECOC码&lt;/h4&gt;
&lt;p&gt;在书中，我们会看到这样的一张图：     &lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 223; 
			flex-basis: 536px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/chigua.png&#34; data-size=&#34;894x400&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/chigua.png&#34;
			width=&#34;894&#34;
			height=&#34;400&#34;
			srcset=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/chigua_hub8e31a2bb461476b573f82071999d431_126670_480x0_resize_box_3.png 480w, https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/chigua_hub8e31a2bb461476b573f82071999d431_126670_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;
其中涉及到所谓的海明距离与欧氏距离。
海明距离指的是：对于长度相等的两个字符串，在相同位置上不同字符的个数。&lt;br&gt;
而欧氏距离指的是多维空间中两点间绝对距离：
$
dist\left( X,Y \right) =\sqrt{\sum_{i=1}^n{\left( x_i-y_i \right) ^2}}
$            &lt;br&gt;
由此我们可以计算出图中的数字，对(a)图中可有：
$$
\qquad \text{示例}-1 {\color{red} -1 +1 -1 }+1
\\
C1\text{编码} \ -1 {\color{red} +1 -1 +1 }+1
$$
容易看出海明距离为3，而欧氏距离为
$$
\sqrt{\left( -1-\left( -1 \right) \right) ^2+\left( -1-1 \right) ^2+2^2+2^2+0}=2\sqrt{3}
$$
其他值可以用相同的办法推导得到。&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/muyao987/article/details/107197624&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;逻辑回归的原理、推导和常见问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/lsm-boke/p/12242352.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;凸函数、损失函数、线性模型的基本形式、线性回归、w* 的代码实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>矩阵求导简易入门手册</title>
        <link>https://sanbuphy.github.io/p/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC%E7%AE%80%E6%98%93%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/</link>
        <pubDate>Wed, 12 Jan 2022 21:54:58 +0800</pubDate>
        
        <guid>https://sanbuphy.github.io/p/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC%E7%AE%80%E6%98%93%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;初始介绍&#34;&gt;初始介绍&lt;/h2&gt;
&lt;h3 id=&#34;符号规定&#34;&gt;符号规定&lt;/h3&gt;
&lt;p&gt;在本文中，我们做如下规定：&lt;br&gt;
Matrix矩阵为：$\mathbf{A}, \mathbf{X}, \mathbf{Y}$ &lt;br&gt;
Vector向量（规定为$\color{red} {列} $向量）为：$ \mathbf{a}, \mathbf{x}, \mathbf{y}$&lt;br&gt;
Scalar标量为：$a, x, y$&lt;/p&gt;
&lt;h3 id=&#34;分子布局&#34;&gt;分子布局&lt;/h3&gt;
&lt;p&gt;在矩阵求导中，我们有两种布局（分子与分母）   &lt;br&gt;
为了方便起见，本文只阐述了分子布局即：&lt;/p&gt;
&lt;p&gt;$$\frac{\partial \mathbf{y}}{\partial {x}}=\left[\begin{array}{c}  \frac{\partial y_{1}}{\partial x}  \\  \frac{\partial y_{2}}{\partial x} \\ \vdots \\  \frac{\partial y_{m}}{\partial x}\end{array}\right]\ \ \
\frac{\partial y}{\partial \mathbf {x}} = \left[\frac{\partial y}{\partial x_{1}} ,\frac{\partial y}{\partial x_{2}}, \cdots ,\frac{\partial y}{\partial x_{n}}\right]$$
分母布局为分子布局的转置。 &lt;br&gt;
&lt;strong&gt;记忆方法：分子列向量分母标量，看作长筒冰淇淋，分母看作小盒子，“能站住”。分子标量分母列向量，则盒子把冰淇淋“压倒了”。或可看最后结果的行数，是分子的行数便是分子布局。&lt;/strong&gt;     &lt;br&gt;
一般的，我们会遇到如下布局,且可用记忆方法配合右图形象理解(下面是结果）：
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 126; 
			flex-basis: 303px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC%E7%AE%80%E6%98%93%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/leixing.png&#34; data-size=&#34;415x328&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC%E7%AE%80%E6%98%93%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/leixing.png&#34;
			width=&#34;415&#34;
			height=&#34;328&#34;
			srcset=&#34;https://sanbuphy.github.io/p/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC%E7%AE%80%E6%98%93%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/leixing_hu6f83b6254a6e60a05ec81f6ae07e2db0_25597_480x0_resize_box_3.png 480w, https://sanbuphy.github.io/p/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC%E7%AE%80%E6%98%93%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/leixing_hu6f83b6254a6e60a05ec81f6ae07e2db0_25597_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;by: Reference 2&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;by: Reference 2&lt;/figcaption&gt;
	
&lt;/figure&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 243; 
			flex-basis: 585px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC%E7%AE%80%E6%98%93%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/leixing2.png&#34; data-size=&#34;824x338&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC%E7%AE%80%E6%98%93%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/leixing2.png&#34;
			width=&#34;824&#34;
			height=&#34;338&#34;
			srcset=&#34;https://sanbuphy.github.io/p/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC%E7%AE%80%E6%98%93%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/leixing2_hu35b1b9fc292f8856c2d4ca726f9b9dc1_6193_480x0_resize_box_3.png 480w, https://sanbuphy.github.io/p/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC%E7%AE%80%E6%98%93%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/leixing2_hu35b1b9fc292f8856c2d4ca726f9b9dc1_6193_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;by: Reference 2&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;by: Reference 2&lt;/figcaption&gt;
	
&lt;/figure&gt;
当分子为矢量、矩阵时，结果为分子的行；当分子为标量时，结果是分母转置的行。&lt;/p&gt;
&lt;h3 id=&#34;vector-by-vector&#34;&gt;Vector-by-Vector&lt;/h3&gt;
&lt;p&gt;另外我们有：&lt;/p&gt;
&lt;p&gt;$\mathbf{y}=\begin{bmatrix}
y_1 \\
y_2 \\
\vdots \\
y_m
\end{bmatrix}$
$\mathbf{x}=\begin{bmatrix}
x_1 \\
x_2 \\
\vdots \\
x_n
\end{bmatrix}$
由 $ \frac{\partial \mathbf{y}}{\partial \mathbf{x}}$ 运算后产生m行n列矩阵：
$ \frac{\partial \mathbf{y}}{\partial \mathbf{x}} \stackrel{\text { def }}{=}\left[\begin{array}{cccc}\frac{\partial y_{1}}{\partial x_{1}} &amp;amp; \frac{\partial y_{1}}{\partial x_{2}} &amp;amp; \ldots &amp;amp; \frac{\partial y_{1}}{\partial x_{n}} \\ \frac{\partial y_{2}}{\partial x_{1}} &amp;amp; \frac{\partial y_{2}}{\partial x_{2}} &amp;amp; \ldots &amp;amp; \frac{\partial y_{2}}{\partial x_{n}} \\ \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots\\ \frac{\partial y_{m}}{\partial x_{1}} &amp;amp; \frac{\partial y_{m}}{\partial x_{2}} &amp;amp; \ldots &amp;amp; \frac{\partial y_{m}}{\partial x_{n}}\end{array}\right] $  &lt;br&gt;
这种矩阵可被称为&lt;strong&gt;Jacobian matrix&lt;/strong&gt;。
接下来举个例子，若我们有：
$$\mathbf{y}=\begin{bmatrix}
y_1 \\
y_2 \\
\end{bmatrix}
\ \ \ \mathbf{x}=\begin{bmatrix}
x_1 \\
x_2 \\
x_3
\end{bmatrix}\ \ 且y_1=x^2_1-2x_2 \ ,\ y_2=x^2_3-4x_2$$
则能得到:
$$\frac{\partial \mathbf{y}}{\partial \mathbf{x}} =\begin{bmatrix}
2x_1 &amp;amp; -2 &amp;amp; 0 \\
0 &amp;amp; -4 &amp;amp; 2x_3 \\
\end{bmatrix}
$$&lt;/p&gt;
&lt;h3 id=&#34;matrix-by-scalar&#34;&gt;Matrix-by-Scalar&lt;/h3&gt;
&lt;p&gt;同样的，我们可以给出矩阵与向量间的运算关系：     &lt;br&gt;
$ \frac{\partial \mathbf{Y}}{\partial {x}} \stackrel{}{=}\left[\begin{array}{cccc}\frac{\partial Y_{11}}{\partial x} &amp;amp; \frac{\partial Y_{12}}{\partial x} &amp;amp; \ldots &amp;amp; \frac{\partial Y_{1n}}{\partial x} \\ \frac{\partial Y_{21}}{\partial x} &amp;amp; \frac{\partial Y_{22}}{\partial x} &amp;amp; \ldots &amp;amp; \frac{\partial Y_{2n}}{\partial x} \\ \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots\\ \frac{\partial Y_{m1}}{\partial x} &amp;amp; \frac{\partial Y_{m2}}{\partial x} &amp;amp; \ldots &amp;amp; \frac{\partial Y_{mn}}{\partial x}\end{array}\right]$
$ \ \ \ \ \ and \ \ \ \ \frac{\partial y}{\partial\mathbf{X}} \stackrel{}{=}\left[\begin{array}{cccc}\frac{\partial y}{\partial X_{11}} &amp;amp; \frac{\partial y}{\partial X_{21}} &amp;amp; \ldots &amp;amp; \frac{\partial y}{\partial X_{m1}} \\ \frac{\partial y}{\partial X_{12}} &amp;amp; \frac{\partial y}{\partial X_{22}} &amp;amp; \ldots &amp;amp; \frac{\partial y}{\partial X_{m2}} \\ \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots\\ \frac{\partial y}{\partial X_{1n}} &amp;amp; \frac{\partial y}{\partial X_{2n}} &amp;amp; \ldots &amp;amp; \frac{\partial y}{\partial X_{mn}}\end{array}\right] $&lt;br&gt;
可以注意到当矩阵在分母时$\mathrm{X}$已经“被转置”&lt;/p&gt;
&lt;h2 id=&#34;常用求导公式&#34;&gt;常用求导公式&lt;/h2&gt;
&lt;p&gt;注：其中$\mathbf{a},\mathrm{A}$都不是$\mathbf{x}, \mathrm{X}$的函数  &lt;br&gt;
$$\frac{\mathrm{d} \mathbf{a}}{\mathrm{d} x} =\mathbf{0} \tag{1} \qquad  (column \ matrix)$$
$$\frac{\mathrm{d}a }{\mathrm{d} \mathbf{x}} =\mathbf{0}^{\mathrm{T}}  \tag{2} \qquad  (row \ matrix)$$
$$\frac{\mathrm{d}a }{\mathrm{d} \mathbf{X}} =\mathbf{0}^{\mathrm{T}} \tag{3} \qquad  (matrix)$$
$$\frac{\mathrm{d} \mathbf{a} }{\mathrm{d} \mathbf{X}} =\mathbf{0} \tag{4} \qquad  (matrix)$$
$$\frac{\mathrm{d} \mathbf{x} }{\mathrm{d} \mathbf{x}} =\mathbf{I} \tag{5} \qquad  (matrix)$$
若想从“直观上”理解结果为什么会有转置符，可以反复理解 &lt;strong&gt;(1.2)分子布局&lt;/strong&gt; 中的右图
$$\frac{\mathrm{d} \mathbf{a}^{\mathrm{T}}\mathbf{x} }{\mathrm{d} \mathbf{x}}=\frac{\mathrm{d} \mathbf{x}^{\mathrm{T}}\mathbf{a} }{\mathrm{d} \mathbf{x}}=\mathbf{a}^{\mathrm{T}} \tag{6} $$
$$\frac{\mathrm{d} \mathbf{x}^{\mathrm{T}}\mathbf{x} }{\mathrm{d} \mathbf{x}}=2\mathbf{x}^{\mathrm{T}} \tag{7} $$
$$\frac{\mathrm{d} ({\mathbf{x}^{\mathrm{T}}\mathbf{a}})^2 }{\mathrm{d} \mathbf{x}}=2\mathbf{x}^{\mathrm{T}}\mathbf{a}\mathbf{a}^{\mathrm{T}} \tag{8} $$
$$\frac{\mathrm{d} \mathbf{Ax} }{\mathrm{d} \mathbf{x}} =\mathbf{A} \tag{9} $$
$$\frac{\mathrm{d} \mathbf{x}^{\mathrm{T}}\mathbf{A} }{\mathrm{d} \mathbf{x}}=\mathbf{A}^{\mathrm{T}} \tag{10} $$
$$\frac{\mathrm{d} \mathbf{x}^{\mathrm{T}}\mathbf{A}\mathbf{x} }{\mathrm{d} \mathbf{x}}=\mathbf{x}^{\mathrm{T}}(\mathbf{A}+\mathbf{A}^{\mathrm{T}}) \tag{11} $$&lt;/p&gt;
&lt;p&gt;注：其中(11)用到了矩阵求导中的&amp;quot;莱布尼兹法则&amp;quot;（仔细思考前者的行列与后者的行列就可以明白）:
$$\frac{\partial \mathbf u^{\mathrm{T} }\mathbf v}{\partial \mathbf x} =
\mathbf u^{\mathrm{T}} \frac{\partial \mathbf v}{\partial \mathbf x} +
\mathbf v^{\mathrm{T}}\frac{\partial \mathbf u}{\partial \mathbf x}$$&lt;/p&gt;
&lt;h2 id=&#34;实例练习&#34;&gt;实例练习&lt;/h2&gt;
&lt;p&gt;我们会好奇一个问题：为什么大多数求导后以及求导时形式都是转置在前？   &lt;br&gt;
可以这么理解，假设有参数$\mathbf{\Theta } =\begin{bmatrix}
\theta_0\\
\theta_1\\
\theta_2
\end{bmatrix}$
以及列向量$\mathbf{x}=\begin{bmatrix}
1 \\
x_1 \\
x_2
\end{bmatrix}$
我们可以把多元函数表达为$$f(x_1,x_2)=\Theta^{\mathrm{T}} \mathbf{x}=\theta_0 + \theta_1x_1 + \theta_2x_2$$
方便计算，且符合目的。在计算结果直觉中一定要紧紧把握结果与分子（上下拉长）分母（左右拉宽）的关系。&lt;/p&gt;
&lt;h3 id=&#34;多元线性回归推导&#34;&gt;多元线性回归推导&lt;/h3&gt;
&lt;p&gt;在西瓜书第三章开头中，我们需要求解最小error$\ E=(\boldsymbol{y}-\mathbf{X}\boldsymbol{\hat{w}})^{\mathrm{T}}(\boldsymbol{y}-\mathbf{X}\boldsymbol{\hat{w}}) $
对其展开有：$$ \begin{aligned}(\boldsymbol{y}-\mathbf{X}\boldsymbol{\hat{w}})^{\mathrm{T}}(\boldsymbol{y}-\mathbf{X}\boldsymbol{\hat{w}}) &amp;amp;=(\boldsymbol{y}^{\mathrm{T}}-\boldsymbol{\hat{w}}^{\mathrm{T}}\mathbf{X}^{\mathrm{T}})(\boldsymbol{y}-\mathbf{X}\boldsymbol{\hat{w}}) \\
&amp;amp;= \boldsymbol{y}^{\mathrm{T}} \boldsymbol{y}- (\boldsymbol{y}^{\mathrm{T}} \mathbf{X})  \boldsymbol{\hat{w}}-\boldsymbol{\hat{w}}^{\mathrm{T}} (\mathbf{X}^{\mathrm{T}} \boldsymbol{y})
+\boldsymbol{\hat{w}}^{\mathrm{T}} (\mathbf{X}^{\mathrm{T}} \mathbf{X})  \boldsymbol{\hat{w}} \end{aligned}$$&lt;/p&gt;
&lt;p&gt;把括号中看作常数，每一项分别对 $\boldsymbol{\hat{w}}$ 求导，利用公式$(9),(10),(11)$可得: &lt;br&gt;
$$ \frac{\partial \boldsymbol{E}_{\boldsymbol{\hat{w}}} }{\partial \boldsymbol{\hat{w}}} = -\boldsymbol{y}^{\mathrm{T}} \mathbf{X} - \boldsymbol{y}^{\mathrm{T}} \mathbf{X} + \boldsymbol{\hat{w}}^{\mathrm{T}} [\mathbf{X}^{\mathrm{T}} \mathbf{X}+(\mathbf{X}^{\mathrm{T}} \mathbf{X})^{\mathrm{T}}] = -2\boldsymbol{y}^{\mathrm{T}} \mathbf{X} + 2\boldsymbol{\hat{w}}^{\mathrm{T}} \mathbf{X}^{\mathrm{T}} \mathbf{X} $$
令其等于零可得：
$$\boldsymbol{y}^{\mathrm{T}} \mathbf{X} = \boldsymbol{\hat{w}}^{\mathrm{T}} \mathbf{X}^{\mathrm{T}} \mathbf{X}$$
同时转置可得：
$$ \mathbf{X}^{\mathrm{T}} \boldsymbol{y}  = \mathbf{X}^{\mathrm{T}} \mathbf{X} \boldsymbol{\hat{w}}  $$
若此时 $\mathbf{X}^{\mathrm{T}} \mathbf{X}$ 为满秩、非奇异矩阵，我们可以得到：
$$\boldsymbol{\hat{w}}=( \mathbf{X}^{\mathrm{T}} \mathbf{X})^{-1} \mathbf{X}^{\mathrm{T}} \boldsymbol{y}   \\ \ \\ Q.E.D$$&lt;/p&gt;
&lt;h2 id=&#34;上文公式的证明过程&#34;&gt;上文公式的证明过程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果你不知道计算结果是否正确，可以使用&lt;a class=&#34;link&#34; href=&#34;http://www.matrixcalculus.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;验算矩阵求导结果是否正确&lt;/a&gt;进行验证。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;证明(6)
$$
Let \; s=\boldsymbol{a}^T\mathbf{x}={a}_1x_1+\cdots +a_nx_n.\quad Then,\;\frac{\partial s}{\partial x_i}=a_i
\\
So,\:\frac{\mathrm{d} \boldsymbol{a}^{\mathrm{T}}\mathbf{x} }{\mathrm{d} \mathbf{x}}=\frac{\mathrm{d} s}{\mathrm{d} \mathbf{x}}=\left[ \frac{\mathrm{d}s}{\mathrm{d}x_1},\frac{\mathrm{d}s}{\mathrm{d}x_2},\cdots ,\frac{\mathrm{d}s}{\mathrm{d}x_n} \right] =\left[ a_1,a_2,\cdots ,a_n \right] =\boldsymbol{a}^T
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;证明(7)
$$
Let \; s=\boldsymbol{\mathbf{x}}^{\mathrm{T}}\mathbf{x}=\sum_i{x_{i}^{2}}. \quad
Then,\;\frac{\partial s}{\partial x_i}=2x_i \\ So, \;\; \frac{\mathrm{d} s}{\mathrm{d} \mathbf{x}}=2\mathbf{x}^{\mathrm{T}}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;证明(8)  &lt;br&gt;
当成复合函数即可，相信你可以自己证明！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;证明(9)  &lt;br&gt;
比较麻烦的方法，由：
$$
\mathbf{A}\mathbf{x}=\left[ \begin{matrix}
a_{11}&amp;amp;		\cdots&amp;amp;		a_{1n}\\
\vdots&amp;amp;		\ddots&amp;amp;		\vdots\\
a_{n1}&amp;amp;		\cdots&amp;amp;		a_{nn}\\
\end{matrix} \right] \left[ \begin{array}{c}
x_1\\
\vdots\\
x_n\\
\end{array} \right] =\left[ \begin{array}{c}
a_{11}x_1+\cdots +a_{1n}x_n\\
\vdots\\
a_{n1}x_1+\cdots +a_{nn}x_n\\
\end{array} \right]
$$ &lt;br&gt;
再由“分子决定行，分母决定列，分别求导”原则（如果不理解可以返回开头再看一遍）
得到：
$$
\left[ \begin{matrix}
a_{11}&amp;amp;		\cdots&amp;amp;		a_{1n}\\
\vdots&amp;amp;		\ddots&amp;amp;		\vdots\\
a_{n1}&amp;amp;		\cdots&amp;amp;		a_{nn}\\
\end{matrix} \right]=\mathbf{A}
$$
比较简单的方法：（类似上面的证明）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$
Let\,\,  \boldsymbol{s}=\mathbf{A} \mathbf{x}. \;\;  Then,  s_i=\sum_j{\begin{array}{c}
a_{ij}x_j\\
\end{array}}, and\,\,\frac{\partial s_i}{\partial x_j}=a_{ij}.
\\
So, \frac{\mathrm{d} \boldsymbol{s}}{\mathrm{d} \mathbf{x}}=A.
$$&lt;/p&gt;
&lt;p&gt;注释:有些情况（比如矩阵对向量、向量对矩阵、矩阵对矩阵求导）可能存在不好表达的情况（详情参考Reference4)因为列向量对列向量求导本质是用雅可比矩阵定义的。在这里建议直接记住结果,或者用网站验证结果；如果会用张量指标计算也行。如果你想学习更一般地做法，可以参考附录3的文章。&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/sanbuphy/chiguaqunzhong/blob/main/matrix_calculus%20NTU%20.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;matrix_calculus NTU (Po-Chen Wu)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://wenku.baidu.com/view/ace84aa564ce0508763231126edb6f1aff0071f2.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Matrix Differentiation NUS(Leow Wee Kheng)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/273729929&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;矩阵求导公式的数学推导（矩阵求导——基础篇）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://daiwk.github.io/assets/matrix&amp;#43;vector&amp;#43;derivatives&amp;#43;for&amp;#43;machine&amp;#43;learning.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;机器学习中的矩阵、向量求导&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>《机器学习》西瓜书笔记(一)</title>
        <link>https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/</link>
        <pubDate>Tue, 11 Jan 2022 20:53:41 +0800</pubDate>
        
        <guid>https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;本文为个人对西瓜书不成熟的一些理解和资料整理，欢迎批评指出意见，谢谢！(可邮箱联系physicoada@gmail.com)&lt;/p&gt;
&lt;h2 id=&#34;西瓜书章节一--绪论&#34;&gt;西瓜书章节一  绪论&lt;/h2&gt;
&lt;p&gt;文字版浓缩可参考：&lt;a class=&#34;link&#34; href=&#34;https://github.com/Vay-keen/Machine-learning-learning-notes/blob/master/%E5%91%A8%E5%BF%97%E5%8D%8E%E3%80%8AMachine%20Learning%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%281%29--%E7%BB%AA%E8%AE%BA.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;周志华机器学习笔记1 by:Vay-keen&lt;/a&gt;&lt;br&gt;
简易版思维导图：&lt;a class=&#34;link&#34; href=&#34;https://github.com/Sophia-11/Machine-Learning-Notes/tree/master/ch1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;周志华第一章 by:Sophia-11&lt;/a&gt; &lt;br&gt;
其中一些计算问题:&lt;/p&gt;
&lt;h3 id=&#34;p21-如何理解假设空间&#34;&gt;p21 如何理解假设空间&lt;/h3&gt;
&lt;p&gt;考虑到通配符，假设如文中一般原始参数的取值分别为3，3，3；则总可能值为(3+1)（3+1）（3+1）+1=65种  &lt;br&gt;
或者更复杂一些，可以枚举求得：&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/63186122&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;枚举法理解版本空间&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;p22-如何理解版本空间&#34;&gt;p22 如何理解版本空间&lt;/h3&gt;
&lt;p&gt;简单而言，版本空间用于对学习内容进行收敛，是为了收敛假设空间从而使其成为与数据集一致的所有假设的子集集合。本质是缩减假设范围，也就是我们研究问题的范围。操作上可形象理解为“矩阵边界的集合”，有上下界，需要有一定的泛化程度。 &lt;br&gt;
从图上理解：
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 203; 
			flex-basis: 487px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/chigua1-1.png&#34; data-size=&#34;1277x629&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/chigua1-1.png&#34;
			width=&#34;1277&#34;
			height=&#34;629&#34;
			srcset=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/chigua1-1_huad3feedb23b3964bb693bb0476f346b0_72292_480x0_resize_box_3.png 480w, https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/chigua1-1_huad3feedb23b3964bb693bb0476f346b0_72292_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Photo by WIKI&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Photo by WIKI&lt;/figcaption&gt;
	
&lt;/figure&gt;  &lt;br&gt;
从假设空间的分布缩减理解：&lt;a class=&#34;link&#34; href=&#34;https://www.jianshu.com/p/5ba037200102&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;version space算法&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;p24-nfl定理的推导理解&#34;&gt;p24 NFL定理的推导理解&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 163; 
			flex-basis: 392px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/chigua1-2.jpg&#34; data-size=&#34;1103x675&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/chigua1-2.jpg&#34;
			width=&#34;1103&#34;
			height=&#34;675&#34;
			srcset=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/chigua1-2_hued8527f6c7ce47642931d657b143adb6_224800_480x0_resize_q75_box.jpg 480w, https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/chigua1-2_hued8527f6c7ce47642931d657b143adb6_224800_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Photo by 我自己&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Photo by 我自己&lt;/figcaption&gt;
	
&lt;/figure&gt;
如果还不能理解，可以参考：&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/113126712&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;浅谈NFL没有免费的午餐定理&lt;/a&gt;&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.cxyzjd.com/article/wyf2017/107669811&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;NFL公式推导&lt;/a&gt;  &lt;br&gt;
如果还不能理解1/2，可参考南瓜书中的真实函数展开&lt;/p&gt;
&lt;h2 id=&#34;西瓜书章节二--模型评估与选择&#34;&gt;西瓜书章节二  模型评估与选择&lt;/h2&gt;
&lt;p&gt;文字浓缩版可参考：&lt;a class=&#34;link&#34; href=&#34;https://github.com/Vay-keen/Machine-learning-learning-notes/blob/master/%E5%91%A8%E5%BF%97%E5%8D%8E%E3%80%8AMachine%20Learning%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%282%29--%E6%80%A7%E8%83%BD%E5%BA%A6%E9%87%8F.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;性能度量方法&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://github.com/Vay-keen/Machine-learning-learning-notes/blob/master/%E5%91%A8%E5%BF%97%E5%8D%8E%E3%80%8AMachine%20Learning%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%283%29--%E5%81%87%E8%AE%BE%E6%A3%80%E9%AA%8C%26%E6%96%B9%E5%B7%AE%26%E5%81%8F%E5%B7%AE.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;假设检验&amp;amp;方差&amp;amp;偏差&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;加强理解查准率查全率以及rocauc&#34;&gt;加强理解查准率、查全率以及ROC、AUC&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/kMD8d5R/article/details/98552574&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;一文带你彻底理解ROC曲线和AUC值&lt;/a&gt;     &lt;br&gt;
本文用患病的例子生动形象直观解释了所有概念。
那么，ROC、AUC具体是如何计算的呢？   &lt;br&gt;
请参考南瓜书(2.20)公式，以及(2.21)。&lt;/p&gt;
&lt;h3 id=&#34;p61-如何理解噪声与f独立从而使得最后项为0&#34;&gt;p61 如何理解噪声与f独立从而使得最后项为0&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 83; 
			flex-basis: 199px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/chigua1-3.jpg&#34; data-size=&#34;930x1117&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/chigua1-3.jpg&#34;
			width=&#34;930&#34;
			height=&#34;1117&#34;
			srcset=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/chigua1-3_huc8117000bb929691b7e4c48a4c5416fd_209137_480x0_resize_q75_box.jpg 480w, https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/chigua1-3_huc8117000bb929691b7e4c48a4c5416fd_209137_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Photo by 我自己&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Photo by 我自己&lt;/figcaption&gt;
	
&lt;/figure&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 95; 
			flex-basis: 229px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/chigua1-4.jpg&#34; data-size=&#34;913x955&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/chigua1-4.jpg&#34;
			width=&#34;913&#34;
			height=&#34;955&#34;
			srcset=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/chigua1-4_hufa255f0a000590d94cc0589d7b9444cf_219395_480x0_resize_q75_box.jpg 480w, https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/chigua1-4_hufa255f0a000590d94cc0589d7b9444cf_219395_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Photo by 我自己&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Photo by 我自己&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;其他问题&#34;&gt;其他问题&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.matrix67.com/blog/archives/105&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;什么是P问题、NP问题和NPC问题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;部分内容未补全，慢慢补全&lt;/p&gt;
</description>
        </item>
        <item>
        <title>利用git生成SSH并与github连接</title>
        <link>https://sanbuphy.github.io/p/%E5%88%A9%E7%94%A8git%E7%94%9F%E6%88%90ssh%E5%B9%B6%E4%B8%8Egithub%E8%BF%9E%E6%8E%A5/</link>
        <pubDate>Wed, 05 Jan 2022 22:54:06 +0800</pubDate>
        
        <guid>https://sanbuphy.github.io/p/%E5%88%A9%E7%94%A8git%E7%94%9F%E6%88%90ssh%E5%B9%B6%E4%B8%8Egithub%E8%BF%9E%E6%8E%A5/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;注意事项&#34;&gt;注意事项&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在开始菜单，需要使用&lt;strong&gt;管理员&lt;/strong&gt;模式打开git bash&lt;/li&gt;
&lt;li&gt;在linux操作中（比如git）粘贴操作是shift+insert或单击鼠标的滚轮。而复制只要选中即可。（粘贴后修改就很麻烦了，推荐先修改好再粘贴）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;生成ssh账号密码&#34;&gt;生成SSH账号密码&lt;/h2&gt;
&lt;p&gt;如果你是第一次使用,可以先设置git的user name和email：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git config --global user.name &amp;quot;这里改成你的名字&amp;quot;
git config --global user.email  &amp;quot;这里改成你的邮箱&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来即可生成ssh密钥：（注意别把$和#注释部分也给复制进去了，只需要复制考虑$后面的部分）&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ssh-keygen -t rsa -b 4096 -C &amp;quot;这里改成你的邮箱&amp;quot;
# -t 密钥方式设定
# -b 密钥强度设定
# -C 注释设定

# 你会看到出现以下信息：
Generating public/private rsa key pair.
Enter file in which to save the key (/Users/ts/.ssh/id_rsa): /Users/ts/.ssh/id_rsa_github # 此时输入你的密钥用户名(可以是邮箱)
Enter passphrase (empty for no passphrase):  #此时输入你的密钥密码
Enter same passphrase again:  # 再次输入密码
#以防万一忘记账户密码，你可以记在其他地方

#看到以下信息，便说明你大概率生成成功
Your identification has been saved in id_rsa_github.
Your public key has been saved in id_rsa_github.pub.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来需要检查我们是不是真的生成成功：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ls -l ~/.ssh
#如果你看到以下信息，就说明已生成成功（没看到config也没关系）
-rw-------  1 ts  staff   938  9 15 22:53 config
-rw-------  1 ts  staff  3326 11  8 21:52 id_rsa_github #私密密钥
-rw-r--r--  1 ts  staff   757 11  8 21:52 id_rsa_github.pub #公开密钥 注意这个要用记事本模式打开，然后在下一步骤中粘贴
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意，这时候可能找不到密钥，但在文件夹中又看得到rsa密钥文件&lt;/strong&gt;，此时可以在不同文件夹（可能生成在某个子类文件夹内）右键打开git bash再输入上述命令，直到能出现以上信息为止。【记住此时的文件夹，在第四步还有用】&lt;/p&gt;
&lt;h2 id=&#34;在github添加ssh-key&#34;&gt;在github添加SSH key&lt;/h2&gt;
&lt;p&gt;这一步比较简单，在github中右上角找到settings，找到SSH and GPG keys，再选择New SSH key，把上一个步骤中的&lt;strong&gt;公开密钥&lt;/strong&gt;内信息全部粘贴到key中，Title可以随便写。最后点击Add key即可完成（如果想看图文操作可以参考reference）&lt;/p&gt;
&lt;h2 id=&#34;最后修改与验证&#34;&gt;最后修改与验证&lt;/h2&gt;
&lt;p&gt;此时回到第二步末尾中的文件夹，输入以下代码：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim ~/.ssh/config
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时已在命令行格式中进入文件,粘贴以下讯息：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Host github
  HostName github.com
  IdentityFile ~/.ssh/id_rsa_github #指定私密密钥
  User git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;粘贴后（此时还在文件中），我们需要按ESC键跳到命令模式，然后输入下列指令：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ :wq
#冒号是必须的，意思是保存文件并退出vi
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后修正权限：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ chmod 600 ~/.ssh/config
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来我们尝试连接，首先确认ssh-agent是否正常运行:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ eval &amp;quot;$(ssh-agent -s)&amp;quot;

Agent pid 32047
# 出现类似信息则表示正常运行

$ ssh-add ~/.ssh/id_rsa_github

Enter passphrase for /Users/ts/.ssh/id_rsa_github: # 此时输入第二步中设定的密码
Identity added: /Users/ts/.ssh/id_rsa_github (/Users/ts/.ssh/id_rsa_github)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后进行连接！&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ssh -T git@github.com

Hi mackerel7! You&#39;ve successfully authenticated, but GitHub does not provide shell access.
#恭喜你，当出现如上信息则表示你已经成功链接！
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://qiita.com/0ta2/items/25c27d447378b13a1ac3&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHubにssh接続できるようにする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/u013778905/article/details/83501204&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub如何配置SSH Key&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>机器学习入门路径及其数学基础</title>
        <link>https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E8%B7%AF%E5%BE%84%E5%8F%8A%E5%85%B6%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Fri, 31 Dec 2021 19:48:48 +0800</pubDate>
        
        <guid>https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E8%B7%AF%E5%BE%84%E5%8F%8A%E5%85%B6%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/</guid>
        <description>&lt;img src="https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E8%B7%AF%E5%BE%84%E5%8F%8A%E5%85%B6%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/knowledge-3.jpg" alt="Featured image of post 机器学习入门路径及其数学基础" /&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;机器学习的数学基础&#34;&gt;机器学习的数学基础&lt;/h2&gt;
&lt;p&gt;基础不牢地动山摇，好好打数理基础！但一口吃不成大胖子——
有答主提到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;”在很多相关的回答中，我都一再强调不要试图补足数学知识再开始学习机器学习。一般来说，大部分机器学习课程/书籍都要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线性代数：矩阵/张量乘法、求逆，奇异值分解/特征值分解，行列式，范数等&lt;/li&gt;
&lt;li&gt;统计与概率：概率分布，独立性与贝叶斯，最大似然（MLE）和最大后验估计（MAP）等&lt;/li&gt;
&lt;li&gt;优化：线性优化，非线性优化(凸优化/非凸优化)以及其衍生的求解方法如梯度下降、牛顿法、基因算法和模拟退火等&lt;/li&gt;
&lt;li&gt;微积分：偏微分，链式法则，矩阵求导等&lt;/li&gt;
&lt;li&gt;信息论、数值理论等&lt;br&gt;
一般人如果想要把这些知识都补全再开始机器学习往往需要很长时间，容易半途而废。而且这些知识是工具不是目的，我们的目标不是成为优化大师。建议在机器学习的过程中哪里不会补哪里，这样更有目的性且耗时更低。”
[本文只包含开源部分的下载链接]&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&#34;线性代数&#34;&gt;线性代数&lt;/h3&gt;
&lt;h4 id=&#34;introduction-to-linear-algebra&#34;&gt;Introduction to Linear Algebra&lt;/h4&gt;
&lt;p&gt;适合入门、相对简单友好的书&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://math.mit.edu/~gs/linearalgebra/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;下载地址&lt;/a&gt;  &lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1Sy4y117ot?p=27&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;视频教程&lt;/a&gt;  台湾清华大学 趙啟超教授 &lt;a class=&#34;link&#34; href=&#34;https://ocw.nthu.edu.tw/ocw/index.php?page=course&amp;amp;cid=89&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;课程首页&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;矩阵求导相关&#34;&gt;矩阵求导相关&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;推荐一下我自己写的入门：&lt;a class=&#34;link&#34; href=&#34;https://sanbuphy.github.io/p/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC%E7%AE%80%E6%98%93%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;矩阵求导简易入门手册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;台湾大学 &lt;a class=&#34;link&#34; href=&#34;http://media.ee.ntu.edu.tw/personal/pcwu/tutorials/matrix_calculus.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Matrix Calculu&lt;/a&gt; by Po-Chen Wu
我个人觉得是简要却齐全的速成ppt。&lt;/li&gt;
&lt;li&gt;查阅手册：&lt;a class=&#34;link&#34; href=&#34;https://www.math.uwaterloo.ca/~hwolkowi/matrixcookbook.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;matrixcookbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线计算与验证：&lt;a class=&#34;link&#34; href=&#34;http://www.matrixcalculus.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MatrixCalculus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;线性代数-拓展应用数学系&#34;&gt;线性代数 拓展(应用数学系)&lt;/h4&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://ocw.nctu.edu.tw/course_detail.php?bgid=1&amp;amp;gid=1&amp;amp;nid=271#.WKm5gxBCtsA&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;線性代數(一) Linear Algebra I&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1e7411E7fq?from=search&amp;amp;seid=11378507849111199637&amp;amp;spm_id_from=333.337.0.0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;视频地址&lt;/a&gt; &lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;http://ocw.nctu.edu.tw/course_detail.php?bgid=1&amp;amp;gid=1&amp;amp;nid=361#.WKm5gxBCtsA&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;線性代數(二) Linear Algebra II&lt;/a&gt; &lt;br&gt;
课程用书：Linear Algebra, 4th Edition, S. Friedberg, A. Insel and L. Spence, 2003, Prentice Hall.&lt;/p&gt;
&lt;h3 id=&#34;概率论与统计学&#34;&gt;概率论与统计学&lt;/h3&gt;
&lt;h4 id=&#34;洪永淼-概率论与统计学httpswwwbilibilicomvideobv11t411a7bpp4spm_id_frompagedriver&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV11t411A7bp?p=4&amp;amp;spm_id_from=pageDriver&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;洪永淼 概率论与统计学&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://probability.xmu.edu.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;课件与习题解答&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;mathematics-for-machine-learning&#34;&gt;Mathematics for Machine Learning&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://mml-book.github.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;本书主页&lt;/a&gt;        &lt;a class=&#34;link&#34; href=&#34;https://mml-book.github.io/book/mml-book.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;下载地址&lt;/a&gt;         &lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/35449496&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;学习视频及其笔记&lt;/a&gt;    &lt;br&gt;
本书结构：   &lt;br&gt;
&lt;strong&gt;Part I: Mathematical Foundations&lt;/strong&gt; &lt;br&gt;
 Introduction and Motivation&lt;br&gt;
 Linear Algebra &lt;br&gt;
 Analytic Geometry    &lt;br&gt;
 Matrix Decompositions&lt;br&gt;
 Vector Calculus&lt;br&gt;
 Probability and Distribution &lt;br&gt;
 Continuous Optimization&lt;br&gt;
&lt;strong&gt;Part II: Central Machine Learning Problems&lt;/strong&gt;     &lt;br&gt;
 When Models Meet Data&lt;br&gt;
 Linear Regression&lt;br&gt;
 Dimensionality Reduction with Principal Component Analysis &lt;br&gt;
 Density Estimation with Gaussian Mixture Models&lt;br&gt;
 Classification with Support Vector Machines&lt;/p&gt;
&lt;h2 id=&#34;机器学习入门&#34;&gt;机器学习入门&lt;/h2&gt;
&lt;h3 id=&#34;李宏毅2021春机器学习课程&#34;&gt;李宏毅2021春机器学习课程&lt;/h3&gt;
&lt;p&gt;课程地址：
&lt;a class=&#34;link&#34; href=&#34;https://speech.ee.ntu.edu.tw/~hylee/ml/2021-spring.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://speech.ee.ntu.edu.tw/~hylee/ml/2021-spring.html&lt;/a&gt;&lt;br&gt;
课件和资料Github版：
&lt;a class=&#34;link&#34; href=&#34;https://github.com/Fafa-DL/Lhy_Machine_Learning&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/Fafa-DL/Lhy_Machine_Learning&lt;/a&gt;    &lt;br&gt;
可参考笔记：
&lt;a class=&#34;link&#34; href=&#34;https://github.com/unclestrong/DeepLearning_LHY21_Notes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/unclestrong/DeepLearning_LHY21_Notes&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;机器学习实战基于scikit-learn和tensorflow&#34;&gt;机器学习实战：基于Scikit-Learn和TensorFlow&lt;/h3&gt;
&lt;p&gt;好书，看就完了!!（翻译可能有时候不靠谱）
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 83; 
			flex-basis: 200px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E8%B7%AF%E5%BE%84%E5%8F%8A%E5%85%B6%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/knowledge-2.png&#34; data-size=&#34;386x463&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E8%B7%AF%E5%BE%84%E5%8F%8A%E5%85%B6%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/knowledge-2.png&#34;
			width=&#34;386&#34;
			height=&#34;463&#34;
			srcset=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E8%B7%AF%E5%BE%84%E5%8F%8A%E5%85%B6%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/knowledge-2_hub998d424cc0d75d0365888dc6e72c936_147477_480x0_resize_box_3.png 480w, https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E8%B7%AF%E5%BE%84%E5%8F%8A%E5%85%B6%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/knowledge-2_hub998d424cc0d75d0365888dc6e72c936_147477_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;
[涉及到的代码]](&lt;a class=&#34;link&#34; href=&#34;https://github.com/ageron/handson-ml2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ageron/handson-ml2&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&#34;python机器学习手册&#34;&gt;python机器学习手册&lt;/h3&gt;
&lt;p&gt;本书的特色是任务制学习&lt;/p&gt;
&lt;h2 id=&#34;机器学习进阶&#34;&gt;机器学习进阶&lt;/h2&gt;
&lt;h3 id=&#34;李航老师-统计学习&#34;&gt;李航老师 统计学习&lt;/h3&gt;
&lt;p&gt;入门选手可参考学习路径&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 97; 
			flex-basis: 234px&#34;
	&gt;
	&lt;a href=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E8%B7%AF%E5%BE%84%E5%8F%8A%E5%85%B6%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/knowledge-1.png&#34; data-size=&#34;780x800&#34;&gt;
		&lt;img src=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E8%B7%AF%E5%BE%84%E5%8F%8A%E5%85%B6%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/knowledge-1.png&#34;
			width=&#34;780&#34;
			height=&#34;800&#34;
			srcset=&#34;https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E8%B7%AF%E5%BE%84%E5%8F%8A%E5%85%B6%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/knowledge-1_hub6836be5e8a9ee25a64bf031be9b591c_130380_480x0_resize_box_3.png 480w, https://sanbuphy.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E8%B7%AF%E5%BE%84%E5%8F%8A%E5%85%B6%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/knowledge-1_hub6836be5e8a9ee25a64bf031be9b591c_130380_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Photo by NLP从入门到放弃&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Photo by NLP从入门到放弃&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;深度学习&#34;&gt;深度学习&lt;/h2&gt;
&lt;p&gt;待更新（开摆）&lt;/p&gt;
&lt;h2 id=&#34;计算机视觉&#34;&gt;计算机视觉&lt;/h2&gt;
&lt;p&gt;待更新（开摆）&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/29704017&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;如何用3个月零基础入门「机器学习」？&lt;/a&gt;by微&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1yg411K72z&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;三个月从零入门深度学习，保姆级学习路线图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/pinard/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;刘建平博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>如何运用hugo与github.io搭建个人博客</title>
        <link>https://sanbuphy.github.io/p/%E5%A6%82%E4%BD%95%E8%BF%90%E7%94%A8hugo%E4%B8%8Egithub.io%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
        <pubDate>Tue, 28 Dec 2021 18:39:12 +0800</pubDate>
        
        <guid>https://sanbuphy.github.io/p/%E5%A6%82%E4%BD%95%E8%BF%90%E7%94%A8hugo%E4%B8%8Egithub.io%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;前置要求&#34;&gt;前置要求&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;你可能需要学习如何使用git，可参考本博中的教程或观看&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1FE411P7B3?p=2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;狂神git简单教程&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;你也许也想知道怎么利用GitHub Desktop上传东西到github上，可参考&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/lililuni/article/details/83144090&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub Desktop 的使用教程&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;认识hugo&#34;&gt;认识hugo&lt;/h2&gt;
&lt;p&gt;Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。&lt;br&gt;
中文文档地址：  &lt;a class=&#34;link&#34; href=&#34;https://www.gohugo.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.gohugo.org/&lt;/a&gt;&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/shulei00/article/details/105611007&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;图文安装教程1&lt;/a&gt;&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://blackstar.pro/posts/%E9%80%9A%E8%BF%87hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;图文安装教程2&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;hugo的结构&#34;&gt;hugo的结构&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/weixin_44397907/article/details/99621517&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;hugo的基本用法和页面改造&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://hugo.aiaide.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;hugo中文帮助文档&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;皮肤下载&#34;&gt;皮肤下载&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.gohugo.org/theme/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.gohugo.org/theme/&lt;/a&gt;&lt;br&gt;
注：我用的是&lt;a class=&#34;link&#34; href=&#34;https://github.com/CaiJimmy/hugo-theme-stack/commits?author=hahwul&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;hahwul&lt;/a&gt;
写的stack：  &lt;a class=&#34;link&#34; href=&#34;https://github.com/CaiJimmy/hugo-theme-stack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/CaiJimmy/hugo-theme-stack&lt;/a&gt;&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://docs.stack.jimmycai.com/zh/configuration/custom-menu.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;主题手册&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;markdown语法检索&#34;&gt;markdown语法检索&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.appinn.com/markdown/#%E5%AE%97%E6%97%A8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.appinn.com/markdown/#%E5%AE%97%E6%97%A8&lt;/a&gt;  &lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://edward852.github.io/post/markdown%E6%94%AF%E6%8C%81%E6%83%85%E5%86%B5%E6%B5%8B%E8%AF%95/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;常见的markdown写法&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;创建你的第一个文章&#34;&gt;创建你的第一个文章&lt;/h2&gt;
&lt;p&gt;使用  &lt;code&gt;hugo new xxxxx.md&lt;/code&gt;&lt;br&gt;
注意命名时不可以空格，可以用-代替
然后就可以使用 &lt;code&gt;hugo server &lt;/code&gt;来查看效果啦！&lt;/p&gt;
&lt;h2 id=&#34;发布你的博客&#34;&gt;发布你的博客&lt;/h2&gt;
&lt;p&gt;我们将使用github.io来代替服务器以及域名：&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/cbb944131226/article/details/82940224&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;推荐参考教程&lt;/a&gt;
几个注意事项：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Git要上传或执行的文件可以在文件夹中，右键空白地区点git bash here从而实现目录内操作。&lt;/li&gt;
&lt;li&gt;在linux操作中（比如git）粘贴操作是shift+insert或单击鼠标的滚轮。而复制只要选中即可。&lt;/li&gt;
&lt;li&gt;**【非常重要】**github的域名地址与用户名必须一致，比如你的github名字叫sakura，那么域名必须是sakura.github.io。&lt;/li&gt;
&lt;li&gt;hugo命令&lt;code&gt;hugo  --baseUrl=&amp;quot;https://改为你的名字.github.io/&amp;quot;&lt;/code&gt;执行完后，会生成一个public文件夹，在public文件中执行1.操作即可推送。&lt;/li&gt;
&lt;li&gt;用git推送的时候&lt;code&gt;git pull --rebase origin master&lt;/code&gt;语句可能会出错显示没有文件，不用担心，这是因为此时目标仓库是空的，直接下一步    &lt;br&gt;
最后，你只需要输入对应网址，即可看到自己的宝贝博客了！&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;更新你的博客&#34;&gt;更新你的博客&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在博客目录下使用&lt;code&gt;hugo  --baseUrl=&amp;quot;https://改为你的名字.github.io/&amp;quot;&lt;/code&gt;覆盖原来的public文件夹&lt;/li&gt;
&lt;li&gt;进入public文件夹右键git bash&lt;/li&gt;
&lt;li&gt;分别执行 git init // git add . // git commit -m &amp;lsquo;写你的备注&amp;rsquo; // git push&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;可能存在的问题&#34;&gt;可能存在的问题：&lt;/h2&gt;
&lt;h3 id=&#34;界面出现404&#34;&gt;界面出现404&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;使用Shift+F5强制刷新页面&lt;/li&gt;
&lt;li&gt;检查域名是否和github的名字对应&lt;/li&gt;
&lt;li&gt;github上存放文件的仓库是否只有一个分支（创建时不要勾选生成README.md)&lt;/li&gt;
&lt;li&gt;正常public上传github仓库后会只有一个分支，且包含了public内的所有文件&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;文章看不到&#34;&gt;文章看不到&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;检查是否格式正确，使用了hugo new xxxx.md&lt;/li&gt;
&lt;li&gt;检查是否包含了&lt;code&gt;draft: true&lt;/code&gt;，若有则删除或使用&lt;code&gt;hugo server -D&lt;/code&gt;，若草稿模式开启是看不到文章的&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;数学公式不显示&#34;&gt;数学公式不显示&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;是否使用了&lt;code&gt;math: true&lt;/code&gt;，或尝试导入MathJax包，可参考&lt;a class=&#34;link&#34; href=&#34;https://m0t0k1ch1st0ry.com/blog/2017/10/07/mathjax/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo に MathJax を導入して数式を書けるようにする&lt;/a&gt;  &lt;br&gt;
或者分离式的mathjax调用方法&lt;a class=&#34;link&#34; href=&#34;https://kenbannikki.com/notes/using-mathjax-with-hugo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HugoでMathJaxを使う&lt;/a&gt;       &lt;br&gt;
MathJax的中文文档：https://www.gohugo.org/doc/tutorials/mathjax/ &lt;br&gt;
Mathjax的日文文档：https://www.eng.niigata-u.ac.jp/~nomoto/download/mathjax.pdf&lt;/li&gt;
&lt;li&gt;注意此时&lt;code&gt;\\&lt;/code&gt;换行不成功的话，用&lt;code&gt;\\\&lt;/code&gt;试试看，有些&lt;code&gt;\,&lt;/code&gt;的无效也可以用&lt;code&gt;\\,&lt;/code&gt;代替尝试。&lt;/li&gt;
&lt;li&gt;有时候数学公式正确也会显示不出来，此时你可以检查&lt;strong&gt;代码界面&lt;/strong&gt;或&lt;strong&gt;网页公式处&lt;/strong&gt;是否存在斜体如&amp;quot;&lt;em&gt;_j&lt;/em&gt;&amp;quot;，此时改为&amp;quot;_j&amp;quot;即可恢复正常，特别是_{}时要注意，可以把开始倾斜的代码（找到这里的&amp;quot;_&amp;quot;)改为_{}就可以正常显示。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;文章图片加载很慢&#34;&gt;文章图片加载很慢&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;可以参考这个文章&lt;a class=&#34;link&#34; href=&#34;https://www.dazhuanlan.com/twofie/topics/1881524&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo Content 使用图源、压缩与工具介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;文章头看到了不同的格式比如与---&#34;&gt;文章头看到了不同的格式比如+++与&amp;mdash;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Front Matter支持三种格式，yaml，toml与json方式，你可以参考：&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/sunjinfu19841120/article/details/88956372&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;基础文件和头部格式介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;git-push不成功&#34;&gt;git push不成功&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;此时大概率是网络通信有问题，可以关掉git终端后科学上网；重启git 终端后（windows需要，linux系统不需要）再进行push大概率就可以解决问题了；此时无需再进行git init 等初始化操作因为之前已经做完。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>杂七杂八知识库</title>
        <link>https://sanbuphy.github.io/p/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E7%9F%A5%E8%AF%86%E5%BA%93/</link>
        <pubDate>Tue, 28 Dec 2021 18:39:12 +0800</pubDate>
        
        <guid>https://sanbuphy.github.io/p/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E7%9F%A5%E8%AF%86%E5%BA%93/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;环境配置相关&#34;&gt;环境配置相关&lt;/h2&gt;
&lt;h3 id=&#34;anaconda&#34;&gt;anaconda&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;anaconda与Jupyter notebook安装教程https://zhuanlan.zhihu.com/p/37093476&lt;/li&gt;
&lt;li&gt;国内的anaconda镜像下载：https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/&lt;/li&gt;
&lt;li&gt;anaconda更新与下载包的镜像源更换：https://zhuanlan.zhihu.com/p/35985834&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;计算机原理&#34;&gt;计算机原理&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/lyb2518/article/details/90348111&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;从二进制到处理器原理&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;git小知识&#34;&gt;GIT小知识&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/s/tEk51NAKjcBQ94F2fCyJJg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;要熟练使用 Git，恐怕要记住这60个命令&lt;/a&gt;    &lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.jianshu.com/p/1da8e5ee0100&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;git 入门小知识&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;其他数学&#34;&gt;其他数学&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://mindhacks.cn/2008/09/21/the-magical-bayesian-method/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;数学之美番外篇：平凡而又神奇的贝叶斯方法&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
